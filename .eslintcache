[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts":"26","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx":"27","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts":"28","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx":"29","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts":"30","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts":"31","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx":"32","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts":"33","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts":"34","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx":"35","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts":"36","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts":"37","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts":"38","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts":"39","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx":"40","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts":"41","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts":"42"},{"size":693,"mtime":1605311735663,"results":"43","hashOfConfig":"44"},{"size":1986,"mtime":1609951406150,"results":"45","hashOfConfig":"44"},{"size":1295,"mtime":1605985412425,"results":"46","hashOfConfig":"44"},{"size":1119,"mtime":1605985318735,"results":"47","hashOfConfig":"44"},{"size":489,"mtime":1609782453905,"results":"48","hashOfConfig":"44"},{"size":6455,"mtime":1609832656527,"results":"49","hashOfConfig":"44"},{"size":472,"mtime":1609504816513,"results":"50","hashOfConfig":"44"},{"size":1687,"mtime":1609664351386,"results":"51","hashOfConfig":"44"},{"size":1568,"mtime":1605985332095,"results":"52","hashOfConfig":"44"},{"size":601,"mtime":1609832656530,"results":"53","hashOfConfig":"44"},{"size":1280,"mtime":1609664351398,"results":"54","hashOfConfig":"44"},{"size":191,"mtime":1609491557061,"results":"55","hashOfConfig":"44"},{"size":614,"mtime":1609491557059,"results":"56","hashOfConfig":"44"},{"size":479,"mtime":1605506144409,"results":"57","hashOfConfig":"44"},{"size":408,"mtime":1609504816513,"results":"58","hashOfConfig":"44"},{"size":501,"mtime":1605819223470,"results":"59","hashOfConfig":"44"},{"size":859,"mtime":1609832656525,"results":"60","hashOfConfig":"44"},{"size":1513,"mtime":1609832656523,"results":"61","hashOfConfig":"44"},{"size":1980,"mtime":1609683085744,"results":"62","hashOfConfig":"44"},{"size":1101,"mtime":1609952073569,"results":"63","hashOfConfig":"44"},{"size":1655,"mtime":1609832656526,"results":"64","hashOfConfig":"44"},{"size":866,"mtime":1609659488376,"results":"65","hashOfConfig":"44"},{"size":6974,"mtime":1609951913919,"results":"66","hashOfConfig":"44"},{"size":1181,"mtime":1609782453905,"results":"67","hashOfConfig":"44"},{"size":245,"mtime":1609664351386,"results":"68","hashOfConfig":"44"},{"size":223,"mtime":1609658697821,"results":"69","hashOfConfig":"44"},{"size":2301,"mtime":1609952208628,"results":"70","hashOfConfig":"44"},{"size":892,"mtime":1609664351408,"results":"71","hashOfConfig":"44"},{"size":304,"mtime":1609664351396,"results":"72","hashOfConfig":"44"},{"size":563,"mtime":1609683085745,"results":"73","hashOfConfig":"44"},{"size":389,"mtime":1609664351386,"results":"74","hashOfConfig":"44"},{"size":477,"mtime":1609664351397,"results":"75","hashOfConfig":"44"},{"size":709,"mtime":1609683085746,"results":"76","hashOfConfig":"44"},{"size":221,"mtime":1609782453905,"results":"77","hashOfConfig":"44"},{"size":1647,"mtime":1609832656528,"results":"78","hashOfConfig":"44"},{"size":1917,"mtime":1609832656528,"results":"79","hashOfConfig":"44"},{"size":633,"mtime":1609782453905,"results":"80","hashOfConfig":"44"},{"size":280,"mtime":1609832656526,"results":"81","hashOfConfig":"44"},{"size":504,"mtime":1609832656524,"results":"82","hashOfConfig":"44"},{"size":802,"mtime":1609832656529,"results":"83","hashOfConfig":"44"},{"size":1059,"mtime":1609832656529,"results":"84","hashOfConfig":"44"},{"size":278,"mtime":1609832656525,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"zmf6ak",{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],["176","177"],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["178"],"C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["179"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["180","181"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { shuffle } from \"../../utils/shuffle\";\r\nimport { editQuestionAction, setQuestionsAction } from \"../../actions\";\r\nimport RevisionTypeSelectionSubpage from \"./RevisionTypeSelectionSubpage\";\r\nimport FinalScoreSubpage from \"./FinalScoreSubpage\";\r\nimport QuestionSubpage from \"./QuestionSubpage\";\r\nimport AnswerSubpage from \"./AnswerSubpage\";\r\nimport Button from \"../common/Button/Button\";\r\n\r\nexport enum RevisionType {\r\n  None,\r\n  NewSession,\r\n  ContinueLastSession,\r\n  IncorrectAndUnansweredQuestions,\r\n}\r\n\r\n/*\r\n- When you open the revision sub-page it asks if you want to continue or start a new session.\r\n- If you choose to start a new session, it takes all the unanswered questions and puts them in questionIndexes\r\n- Otherwise it acts normally.\r\n*/\r\n\r\nconst Revision: React.FC = () => {\r\n  const [revisionType, setRevisionType] = useState(RevisionType.None);\r\n  const [score, setScore] = useState(0);\r\n  const [maxScore, setMaxScore] = useState(0);\r\n  const [questionIds, setQuestionIds] = useState<string[]>([]);\r\n  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n  const [answered, setAnswered] = useState(false);\r\n  const currentId = useMemo(\r\n    () => (questionIds.length > 0 ? questionIds[0] : \"\"),\r\n    [questionIds]\r\n  );\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n  const currentQuestion = useMemo(\r\n    () => questions.find(({ id }) => currentId === id),\r\n    [currentId]\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const tryAgain = () => {\r\n    dispatch(\r\n      setQuestionsAction(\r\n        questions.map((question) => {\r\n          return { ...question, lastAnsweredCorrectly: undefined };\r\n        })\r\n      )\r\n    );\r\n    setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n    setScore(() => 0);\r\n    setMaxScore(() => 0);\r\n    setAnswered(() => false);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setAnswered(() => false);\r\n    setSelectedAnswers(() => []);\r\n    // Remove first question index.\r\n    setQuestionIds((prev) => [...prev.filter((_, idx) => idx !== 0)]);\r\n  };\r\n\r\n  const finishAnswering = () => {\r\n    setSelectedAnswers(() => []);\r\n    // Because current index is taken from question indexes.\r\n    setQuestionIds(() => []);\r\n  };\r\n\r\n  const countCorrectAnswers = () => {\r\n    let correctAnswers = 0;\r\n    selectedAnswers.forEach((answer) => {\r\n      if (\r\n        currentQuestion?.correctAnswers.some(\r\n          (correctAnswer) => correctAnswer === answer\r\n        )\r\n      ) {\r\n        correctAnswers++;\r\n      }\r\n    });\r\n\r\n    return correctAnswers;\r\n  };\r\n\r\n  const submitAnswer = () => {\r\n    const correctAnswers = countCorrectAnswers();\r\n    if (currentQuestion === undefined) {\r\n      return;\r\n    }\r\n    const questionCorrectlyAnsweredCount =\r\n      currentQuestion.correctlyAnsweredCount ?? 0;\r\n    const questionTotalAnsweredCount = currentQuestion.totalAnsweredCount ?? 0;\r\n\r\n    dispatch(\r\n      editQuestionAction({\r\n        ...currentQuestion,\r\n        lastAnsweredCorrectly:\r\n          correctAnswers === currentQuestion.correctAnswers.length\r\n            ? true\r\n            : false,\r\n        totalAnsweredCount: questionTotalAnsweredCount + 1,\r\n        correctlyAnsweredCount:\r\n          questionCorrectlyAnsweredCount +\r\n          (correctAnswers === currentQuestion.correctAnswers.length ? 1 : 0),\r\n      })\r\n    );\r\n    setScore((prev) => {\r\n      const newPrev = (prev +=\r\n        correctAnswers / currentQuestion.correctAnswers.length);\r\n      return isNaN(newPrev) ? 0 : newPrev;\r\n    });\r\n    setMaxScore((prev) => (prev += 1));\r\n    setAnswered(() => true);\r\n  };\r\n\r\n  const countScore = () => `${Math.round(score * 100) / 100}/${maxScore}`;\r\n\r\n  // give correct questions based on revisionType\r\n  useEffect(() => {\r\n    if (questionIds.length === 0) {\r\n      switch (revisionType) {\r\n        case RevisionType.NewSession:\r\n          dispatch(\r\n            setQuestionsAction(\r\n              questions.map((question) => {\r\n                return { ...question, lastAnsweredCorrectly: undefined };\r\n              })\r\n            )\r\n          );\r\n          setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n          break;\r\n        case RevisionType.ContinueLastSession:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(\r\n                  ({ lastAnsweredCorrectly }) =>\r\n                    lastAnsweredCorrectly === undefined\r\n                )\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        case RevisionType.IncorrectAndUnansweredQuestions:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(({ lastAnsweredCorrectly }) => !lastAnsweredCorrectly)\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  }, [revisionType]);\r\n\r\n  const render = () => {\r\n    if (revisionType === RevisionType.None) {\r\n      return <RevisionTypeSelectionSubpage setRevisionType={setRevisionType} />;\r\n    } else if (currentId === \"\") {\r\n      return (\r\n        <FinalScoreSubpage\r\n          tryAgain={tryAgain}\r\n          questions={questions}\r\n          score={countScore()}\r\n          percentScore={`${Math.round((score / maxScore) * 100 * 100) / 100}%`}\r\n        />\r\n      );\r\n    } else if (!answered) {\r\n      return (\r\n        currentQuestion && (\r\n          <QuestionSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            submitAnswer={submitAnswer}\r\n            setSelectedAnswers={setSelectedAnswers}\r\n          />\r\n        )\r\n      );\r\n    } else {\r\n      return (\r\n        currentQuestion && (\r\n          <AnswerSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            buttons={\r\n              <>\r\n                {questionIds.length > 1 && (\r\n                  <Button onClick={nextQuestion}>Next Question</Button>\r\n                )}\r\n                <Button onClick={finishAnswering}>Finish</Button>\r\n              </>\r\n            }\r\n          />\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return <>{render()}</>;\r\n};\r\n\r\nexport default Revision;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",["182","183","184"],"import React from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Editor from \"./Editor\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { QuestionsState, isQuestionsState } from \"../../actions/types\";\r\nimport { setQuestionsAction } from \"../../actions\";\r\nimport Button from \"../common/Button/Button\";\r\nimport StyledDiv from \"./QuestionsStyle\";\r\nimport Dropzone from \"../common/Dropzone/Dropzone\";\r\n\r\n\r\nconst Questions: React.FC = () => {\r\n  const match = useRouteMatch();\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/editor`}>\r\n        <Editor />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <StyledDiv>\r\n          <Link to={`${match.url}/editor`}>\r\n            <Button\r\n              backgroundIcon=\"create\"\r\n              width=\"23rem\"\r\n              height=\"12.4rem\"\r\n              fontSize=\"1.9rem\"\r\n              backgroundIconSize=\"10rem\"\r\n            >\r\n              Edit Questions\r\n            </Button>\r\n          </Link>\r\n          <Dropzone />\r\n          <a\r\n            href={`data:text/plain;charset=utf-8,${encodeURIComponent(\r\n              JSON.stringify(questions)\r\n            )}`}\r\n            download=\"questions.json\"\r\n          >\r\n            <Button\r\n              backgroundIcon=\"get_app\"\r\n              width=\"17.5rem\"\r\n              height=\"9.6rem\"\r\n              backgroundIconSize=\"7rem\"\r\n            >\r\n              Download Questions\r\n            </Button>\r\n          </a>\r\n        </StyledDiv>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",["185"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditQuestion from \"./EditQuestion\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport QuestionListElement from \"../common/QuestionListElement/QuestionListElement\";\r\nimport StyledDiv from \"./EditorStyle\";\r\nimport Button from \"../common/Button/Button\";\r\nimport SearchBar from \"../common/SearchBar/SearchBar\";\r\n\r\nconst Editor: React.FC = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const match = useRouteMatch();\r\n\r\n  const questions = useTypedSelector(({ questions }) =>\r\n    questions\r\n      .filter(\r\n        ({ question }) =>\r\n          question.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n      )\r\n      .sort((a, b) => (a.question.toLowerCase() < b.question.toLowerCase() ? -1 : 1))\r\n  );\r\n\r\n  const updateSearch = (text: string) => {\r\n    setSearch(() => text);\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/addQuestion`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={`${match.path}/:questionId`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <StyledDiv>\r\n          <SearchBar\r\n            value={search}\r\n            onChange={(e) => updateSearch(e.target.value)}\r\n          />\r\n          <Link to={`${match.url}/addQuestion`}>\r\n            <Button\r\n              backgroundIcon=\"add\"\r\n              width=\"17.5rem\"\r\n              height=\"9.6rem\"\r\n              backgroundIconSize=\"7rem\"\r\n            >\r\n              Add New Question\r\n            </Button>\r\n          </Link>\r\n          {questions.map(({ question, id }) => (\r\n            <Link className=\"questionLink\" key={id} to={`${match.url}/${id}`}>\r\n              <QuestionListElement>{question}</QuestionListElement>\r\n            </Link>\r\n          ))}\r\n        </StyledDiv>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["186"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx",["187"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx",["188"],"import React from \"react\";\r\nimport StyledQuestion from \"./QuestionListElementStyle\";\r\n\r\ntype Props = {};\r\n\r\nconst QuestionListElement: React.FC = ({ children }) => {\r\n  return (\r\n    <StyledQuestion>\r\n      <span>{children}</span>\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default QuestionListElement;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":33,"column":6,"nodeType":"195","endLine":33,"endColumn":8,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":4,"column":3,"nodeType":"199","messageId":"200","endLine":4,"endColumn":18},{"ruleId":"193","severity":1,"message":"201","line":40,"column":5,"nodeType":"195","endLine":40,"endColumn":16,"suggestions":"202"},{"ruleId":"193","severity":1,"message":"203","line":158,"column":6,"nodeType":"195","endLine":158,"endColumn":20,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"205","line":7,"column":10,"nodeType":"199","messageId":"200","endLine":7,"endColumn":24},{"ruleId":"197","severity":1,"message":"206","line":7,"column":26,"nodeType":"199","messageId":"200","endLine":7,"endColumn":42},{"ruleId":"197","severity":1,"message":"207","line":8,"column":10,"nodeType":"199","messageId":"200","endLine":8,"endColumn":28},{"ruleId":"197","severity":1,"message":"208","line":1,"column":27,"nodeType":"199","messageId":"200","endLine":1,"endColumn":36},{"ruleId":"193","severity":1,"message":"209","line":180,"column":6,"nodeType":"195","endLine":180,"endColumn":8,"suggestions":"210"},{"ruleId":"193","severity":1,"message":"211","line":50,"column":6,"nodeType":"195","endLine":50,"endColumn":8,"suggestions":"212"},{"ruleId":"197","severity":1,"message":"213","line":4,"column":6,"nodeType":"199","messageId":"200","endLine":4,"endColumn":11},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["216"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'questions'. Either include it or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'dispatch', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["218"],"'QuestionsState' is defined but never used.","'isQuestionsState' is defined but never used.","'setQuestionsAction' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["219"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["220"],"'Props' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"231","text":"232"},"Update the dependencies array to be: [currentId, questions]",{"range":"233","text":"234"},"Update the dependencies array to be: [dispatch, questionIds.length, questions, revisionType]",{"range":"235","text":"236"},"Update the dependencies array to be: [questionId, setQuestionData]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch]",{"range":"239","text":"240"},[1199,1201],"[setQuestionsFromLocalStorage]",[1589,1600],"[currentId, questions]",[5051,5065],"[dispatch, questionIds.length, questions, revisionType]",[5433,5435],"[questionId, setQuestionData]",[1759,1761],"[dispatch]"]