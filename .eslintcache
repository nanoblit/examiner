[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts":"26","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx":"27","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts":"28","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx":"29","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts":"30","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts":"31","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx":"32","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts":"33","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts":"34","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx":"35","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts":"36","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts":"37","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts":"38","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts":"39","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx":"40","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts":"41","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts":"42","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\setupAutoResize.ts":"43","C:\\Dev\\Projects\\Web\\examiner\\src\\wdyr.ts":"44"},{"size":711,"mtime":1610874385360,"results":"45","hashOfConfig":"46"},{"size":1925,"mtime":1610874385337,"results":"47","hashOfConfig":"46"},{"size":1295,"mtime":1605985412425,"results":"48","hashOfConfig":"46"},{"size":1119,"mtime":1605985318735,"results":"49","hashOfConfig":"46"},{"size":489,"mtime":1610887770829,"results":"50","hashOfConfig":"46"},{"size":6582,"mtime":1611049328121,"results":"51","hashOfConfig":"46"},{"size":725,"mtime":1610887078983,"results":"52","hashOfConfig":"46"},{"size":1593,"mtime":1610894181014,"results":"53","hashOfConfig":"46"},{"size":1568,"mtime":1605985332095,"results":"54","hashOfConfig":"46"},{"size":716,"mtime":1610894181016,"results":"55","hashOfConfig":"46"},{"size":1280,"mtime":1609664351398,"results":"56","hashOfConfig":"46"},{"size":191,"mtime":1609491557061,"results":"57","hashOfConfig":"46"},{"size":639,"mtime":1611047815815,"results":"58","hashOfConfig":"46"},{"size":479,"mtime":1605506144409,"results":"59","hashOfConfig":"46"},{"size":534,"mtime":1610894181011,"results":"60","hashOfConfig":"46"},{"size":501,"mtime":1605819223470,"results":"61","hashOfConfig":"46"},{"size":888,"mtime":1610874385345,"results":"62","hashOfConfig":"46"},{"size":2192,"mtime":1611049474552,"results":"63","hashOfConfig":"46"},{"size":4312,"mtime":1611559401738,"results":"64","hashOfConfig":"46"},{"size":1750,"mtime":1610877928689,"results":"65","hashOfConfig":"46"},{"size":1972,"mtime":1611049474552,"results":"66","hashOfConfig":"46"},{"size":933,"mtime":1610874385353,"results":"67","hashOfConfig":"46"},{"size":8358,"mtime":1611560728597,"results":"68","hashOfConfig":"46"},{"size":1163,"mtime":1610874385354,"results":"69","hashOfConfig":"46"},{"size":225,"mtime":1610874385338,"results":"70","hashOfConfig":"46"},{"size":236,"mtime":1610874385343,"results":"71","hashOfConfig":"46"},{"size":2357,"mtime":1611047815813,"results":"72","hashOfConfig":"46"},{"size":892,"mtime":1609664351408,"results":"73","hashOfConfig":"46"},{"size":535,"mtime":1611559964199,"results":"74","hashOfConfig":"46"},{"size":550,"mtime":1611559998398,"results":"75","hashOfConfig":"46"},{"size":1298,"mtime":1610894181013,"results":"76","hashOfConfig":"46"},{"size":477,"mtime":1609664351397,"results":"77","hashOfConfig":"46"},{"size":709,"mtime":1609683085746,"results":"78","hashOfConfig":"46"},{"size":419,"mtime":1610877928690,"results":"79","hashOfConfig":"46"},{"size":2489,"mtime":1611560143730,"results":"80","hashOfConfig":"46"},{"size":2137,"mtime":1611560485275,"results":"81","hashOfConfig":"46"},{"size":621,"mtime":1611047815801,"results":"82","hashOfConfig":"46"},{"size":340,"mtime":1611049328121,"results":"83","hashOfConfig":"46"},{"size":560,"mtime":1611049328119,"results":"84","hashOfConfig":"46"},{"size":1334,"mtime":1611560099482,"results":"85","hashOfConfig":"46"},{"size":1075,"mtime":1611560515146,"results":"86","hashOfConfig":"46"},{"size":307,"mtime":1610874385346,"results":"87","hashOfConfig":"46"},{"size":766,"mtime":1611044639735,"results":"88","hashOfConfig":"46"},{"size":290,"mtime":1610874385361,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"zmf6ak",{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],["183","184"],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["185"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\n\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Revision from \"./components/Revision/Revision\";\r\nimport Questions from \"./components/Questions/Questions\";\r\nimport { setQuestionsAction } from \"./actions\";\r\nimport { Question } from \"./models/Question\";\r\nimport { isQuestionsState } from \"./actions/types\";\r\nimport GlobalStyle from \"./styles/globalStyles\";\r\nimport StyledContent from \"./AppStyle\";\r\n\r\nconst App: React.FC = () => {\r\n  const [questionsLoaded, setQuestionsLoaded] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const setQuestionsFromLocalStorage = () => {\r\n    const questions = JSON.parse(\r\n      localStorage.getItem(\"questions\") || \"[]\"\r\n    ) as Question[];\r\n    isQuestionsState(questions)\r\n      ? dispatch(setQuestionsAction(questions))\r\n      : console.error(\"Questions in local storage are wrong\");\r\n\r\n    setQuestionsLoaded(() => true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestionsFromLocalStorage();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <StyledContent>\r\n          <Switch>\r\n            <Route path=\"/questions\">\r\n              <Questions />\r\n            </Route>\r\n            {/* So it can use the questions in store */}\r\n            <Route path=\"/revision\">\r\n              {questionsLoaded && <Revision />}\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <p>Welcome to Examify!</p>\r\n              <p>\r\n                Try adding questions in the Questions subpage and then answer\r\n                them them in Revision!\r\n              </p>\r\n            </Route>\r\n          </Switch>\r\n          <ToastContainer />\r\n        </StyledContent>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["186"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["187","188"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { shuffle } from \"../../utils/shuffle\";\r\nimport { editQuestionAction, setQuestionsAction } from \"../../actions\";\r\nimport RevisionTypeSelectionSubpage from \"./RevisionTypeSelectionSubpage\";\r\nimport FinalScoreSubpage from \"./FinalScoreSubpage\";\r\nimport QuestionSubpage from \"./QuestionSubpage\";\r\nimport AnswerSubpage from \"./AnswerSubpage\";\r\nimport Button from \"../common/Button/Button\";\r\n\r\nexport enum RevisionType {\r\n  None,\r\n  NewSession,\r\n  ContinueLastSession,\r\n  IncorrectAndUnansweredQuestions,\r\n}\r\n\r\nconst Revision: React.FC = () => {\r\n  const [revisionType, setRevisionType] = useState(RevisionType.None);\r\n  const [score, setScore] = useState(0);\r\n  const [maxScore, setMaxScore] = useState(0);\r\n  const [questionIds, setQuestionIds] = useState<string[]>([]);\r\n  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n  const [answered, setAnswered] = useState(false);\r\n  const currentId = useMemo(\r\n    () => (questionIds.length > 0 ? questionIds[0] : \"\"),\r\n    [questionIds]\r\n  );\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n  const currentQuestion = useMemo(\r\n    () => questions.find(({ id }) => currentId === id),\r\n    [currentId, questions]\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const tryAgain = () => {\r\n    dispatch(\r\n      setQuestionsAction(\r\n        questions.map((question) => {\r\n          return { ...question, lastAnsweredCorrectly: undefined };\r\n        })\r\n      )\r\n    );\r\n    setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n    setScore(() => 0);\r\n    setMaxScore(() => 0);\r\n    setAnswered(() => false);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setAnswered(() => false);\r\n    setSelectedAnswers(() => []);\r\n    // Remove first question index.\r\n    setQuestionIds((prev) => [...prev.filter((_, idx) => idx !== 0)]);\r\n  };\r\n\r\n  const finishAnswering = () => {\r\n    setSelectedAnswers(() => []);\r\n    // Because current id is taken from question ids.\r\n    setQuestionIds(() => []);\r\n  };\r\n\r\n  const countCorrectAnswers = () => {\r\n    let correctAnswers = 0;\r\n    selectedAnswers.forEach((answer) => {\r\n      currentQuestion?.correctAnswers.some(\r\n        (correctAnswer) => correctAnswer === answer\r\n      )\r\n        ? correctAnswers++\r\n        : correctAnswers--;\r\n    });\r\n\r\n    return correctAnswers;\r\n  };\r\n\r\n  const submitAnswer = () => {\r\n    const correctAnswers = countCorrectAnswers();\r\n    if (currentQuestion === undefined) {\r\n      return;\r\n    }\r\n    const questionCorrectlyAnsweredCount =\r\n      currentQuestion.correctlyAnsweredCount ?? 0;\r\n    const questionTotalAnsweredCount = currentQuestion.totalAnsweredCount ?? 0;\r\n\r\n    dispatch(\r\n      editQuestionAction({\r\n        ...currentQuestion,\r\n        lastAnsweredCorrectly:\r\n          correctAnswers === currentQuestion.correctAnswers.length,\r\n        totalAnsweredCount: questionTotalAnsweredCount + 1,\r\n        correctlyAnsweredCount:\r\n          questionCorrectlyAnsweredCount +\r\n          (correctAnswers === currentQuestion.correctAnswers.length ? 1 : 0),\r\n      })\r\n    );\r\n    setScore((prev) => {\r\n      const newScore = (prev +=\r\n        correctAnswers === currentQuestion.correctAnswers.length ? 1 : 0);\r\n      return isNaN(newScore) ? 0 : newScore;\r\n    });\r\n    setMaxScore((prev) => (prev += 1));\r\n    setAnswered(() => true);\r\n  };\r\n\r\n  const countScore = () => `${Math.round(score * 100) / 100}/${maxScore}`;\r\n\r\n  const countPercentScore = () =>\r\n    maxScore !== 0\r\n      ? `${Math.round((score / maxScore) * 100 * 100) / 100}%`\r\n      : \"0%\";\r\n\r\n  const getUnansweredQuestions = () =>\r\n    questions.filter(\r\n      ({ lastAnsweredCorrectly }) => lastAnsweredCorrectly === undefined\r\n    );\r\n\r\n  const getIncorrectAndUnansweredQuestions = () =>\r\n    questions.filter(({ lastAnsweredCorrectly }) => !lastAnsweredCorrectly);\r\n\r\n  // give correct questions based on revisionType\r\n  useEffect(() => {\r\n    if (questionIds.length === 0) {\r\n      switch (revisionType) {\r\n        case RevisionType.NewSession:\r\n          dispatch(\r\n            setQuestionsAction(\r\n              questions.map((question) => {\r\n                return { ...question, lastAnsweredCorrectly: undefined };\r\n              })\r\n            )\r\n          );\r\n          setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n          break;\r\n        case RevisionType.ContinueLastSession:\r\n          setQuestionIds(() =>\r\n            shuffle(getUnansweredQuestions().map(({ id }) => id))\r\n          );\r\n          break;\r\n        case RevisionType.IncorrectAndUnansweredQuestions:\r\n          setQuestionIds(() =>\r\n            shuffle(getIncorrectAndUnansweredQuestions().map(({ id }) => id))\r\n          );\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  }, [revisionType]);\r\n\r\n  const render = () => {\r\n    if (revisionType === RevisionType.None) {\r\n      return (\r\n        <RevisionTypeSelectionSubpage\r\n          setRevisionType={setRevisionType}\r\n          allQuestions={questions.length}\r\n          unansweredQuestions={getUnansweredQuestions().length}\r\n          incorrectAndUnansweredQuestions={\r\n            getIncorrectAndUnansweredQuestions().length\r\n          }\r\n        />\r\n      );\r\n    } else if (currentId === \"\") {\r\n      return (\r\n        <FinalScoreSubpage\r\n          tryAgain={tryAgain}\r\n          questions={questions}\r\n          score={countScore()}\r\n          percentScore={countPercentScore()}\r\n        />\r\n      );\r\n    } else if (!answered) {\r\n      return (\r\n        currentQuestion && (\r\n          <QuestionSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            percentScore={countPercentScore()}\r\n            submitAnswer={submitAnswer}\r\n            setSelectedAnswers={setSelectedAnswers}\r\n            questionsToAnswer={questionIds.length}\r\n          />\r\n        )\r\n      );\r\n    } else {\r\n      return (\r\n        currentQuestion && (\r\n          <AnswerSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            percentScore={countPercentScore()}\r\n            questionIds={questionIds}\r\n            nextQuestion={nextQuestion}\r\n            finishAnswering={finishAnswering}\r\n            questionsToAnswer={questionIds.length - 1}\r\n          />\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return <>{render()}</>;\r\n};\r\n\r\nexport default Revision;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",["189"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["190","191"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx",["192"],"import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { isQuestionsState, QuestionsState } from \"../../../actions/types\";\r\nimport { setQuestionsAction } from \"../../../actions\";\r\nimport StyledDropzone from \"./DropzoneStyle\";\r\n\r\nconst Dropzone: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const questionsStateFromString = (contents: string) => {\r\n    try {\r\n      const parsedFileContents = JSON.parse(contents);\r\n      if (!isQuestionsState(parsedFileContents)) {\r\n        console.warn(\"File isn't in the correct questions format (.json)\");\r\n        toast.error(\"File isn't in the correct questions format (.json)\");\r\n        return;\r\n      }\r\n      return parsedFileContents as QuestionsState;\r\n    } catch (e) {\r\n      console.warn(\"Couldn't parse file contents as JSON\");\r\n      toast.error(\"Couldn't parse file contents as JSON\");\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => {\r\n      console.warn(\"File reading was aborted\");\r\n      toast.error(\"File reading was aborted\");\r\n    };\r\n    reader.onerror = (e) => {\r\n      console.warn(e);\r\n      toast.error(e);\r\n    };\r\n    reader.onload = (e) => {\r\n      if (typeof e.target?.result !== \"string\") {\r\n        console.warn(\"Couldn't get string from file\");\r\n        toast.error(\"Couldn't get string from file\");\r\n        return;\r\n      }\r\n      toast.success(\"Questions successfully loaded!\");\r\n      const questionsState = questionsStateFromString(e.target.result);\r\n      questionsState && dispatch(setQuestionsAction(questionsState));\r\n    };\r\n    reader.readAsText(file);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <StyledDropzone {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\".json\" />\r\n      <div className=\"buttonIcon\">\r\n        <i className=\"material-icons\">publish</i>\r\n      </div>\r\n      {isDragActive ? (\r\n        <span>Drop the questions file here...</span>\r\n      ) : (\r\n        <span>Drag and drop here or click to upload the questions file</span>\r\n      )}\r\n    </StyledDropzone>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx",["193","194"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx",["195","196"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\setupAutoResize.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\wdyr.ts",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":33,"column":6,"nodeType":"203","endLine":33,"endColumn":8,"suggestions":"204"},{"ruleId":"205","severity":1,"message":"206","line":4,"column":3,"nodeType":"207","messageId":"208","endLine":4,"endColumn":18},{"ruleId":"205","severity":1,"message":"209","line":11,"column":8,"nodeType":"207","messageId":"208","endLine":11,"endColumn":14},{"ruleId":"201","severity":1,"message":"210","line":150,"column":6,"nodeType":"203","endLine":150,"endColumn":20,"suggestions":"211"},{"ruleId":"201","severity":1,"message":"212","line":62,"column":6,"nodeType":"203","endLine":62,"endColumn":34,"suggestions":"213"},{"ruleId":"205","severity":1,"message":"214","line":8,"column":3,"nodeType":"207","messageId":"208","endLine":8,"endColumn":21},{"ruleId":"201","severity":1,"message":"215","line":216,"column":6,"nodeType":"203","endLine":216,"endColumn":25,"suggestions":"216"},{"ruleId":"201","severity":1,"message":"217","line":50,"column":6,"nodeType":"203","endLine":50,"endColumn":8,"suggestions":"218"},{"ruleId":"201","severity":1,"message":"219","line":42,"column":6,"nodeType":"203","endLine":42,"endColumn":8,"suggestions":"220"},{"ruleId":"201","severity":1,"message":"219","line":47,"column":6,"nodeType":"203","endLine":47,"endColumn":12,"suggestions":"221"},{"ruleId":"201","severity":1,"message":"219","line":26,"column":6,"nodeType":"203","endLine":26,"endColumn":8,"suggestions":"222"},{"ruleId":"201","severity":1,"message":"219","line":31,"column":6,"nodeType":"203","endLine":31,"endColumn":12,"suggestions":"223"},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["226"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getIncorrectAndUnansweredQuestions', 'getUnansweredQuestions', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["227"],"React Hook useEffect has a missing dependency: 'setCorrectPage'. Either include it or remove the dependency array.",["228"],"'editQuestionAction' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["229"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has a missing dependency: 'textAreaRef'. Either include it or remove the dependency array.",["231"],["232"],["233"],["234"],"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"245","fix":"249"},{"desc":"247","fix":"250"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"251","text":"252"},"Update the dependencies array to be: [dispatch, getIncorrectAndUnansweredQuestions, getUnansweredQuestions, questionIds.length, questions, revisionType]",{"range":"253","text":"254"},"Update the dependencies array to be: [questionsAfterSearch, page, setCorrectPage]",{"range":"255","text":"256"},"Update the dependencies array to be: [questionFromStore, questionId, setQuestionData]",{"range":"257","text":"258"},"Update the dependencies array to be: [dispatch]",{"range":"259","text":"260"},"Update the dependencies array to be: [textAreaRef]",{"range":"261","text":"262"},"Update the dependencies array to be: [text, textAreaRef]",{"range":"263","text":"264"},{"range":"265","text":"262"},{"range":"266","text":"264"},[1200,1202],"[setQuestionsFromLocalStorage]",[4900,4914],"[dispatch, getIncorrectAndUnansweredQuestions, getUnansweredQuestions, questionIds.length, questions, revisionType]",[2112,2140],"[questionsAfterSearch, page, setCorrectPage]",[6539,6558],"[questionFromStore, questionId, setQuestionData]",[1759,1761],"[dispatch]",[1134,1136],"[textAreaRef]",[1256,1262],"[text, textAreaRef]",[679,681],[801,807]]