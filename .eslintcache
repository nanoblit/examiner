[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts":"26","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx":"27","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts":"28","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx":"29","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts":"30","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts":"31","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx":"32","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts":"33","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts":"34","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx":"35","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts":"36","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts":"37","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts":"38","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts":"39","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx":"40","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts":"41","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts":"42","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\setupAutoResize.ts":"43","C:\\Dev\\Projects\\Web\\examiner\\src\\wdyr.ts":"44"},{"size":711,"mtime":1610874385360,"results":"45","hashOfConfig":"46"},{"size":1925,"mtime":1610874385337,"results":"47","hashOfConfig":"46"},{"size":1295,"mtime":1605985412425,"results":"48","hashOfConfig":"46"},{"size":1119,"mtime":1605985318735,"results":"49","hashOfConfig":"46"},{"size":489,"mtime":1609782453905,"results":"50","hashOfConfig":"46"},{"size":6254,"mtime":1610877908460,"results":"51","hashOfConfig":"46"},{"size":725,"mtime":1610874385338,"results":"52","hashOfConfig":"46"},{"size":1719,"mtime":1610874385342,"results":"53","hashOfConfig":"46"},{"size":1568,"mtime":1605985332095,"results":"54","hashOfConfig":"46"},{"size":653,"mtime":1610874385361,"results":"55","hashOfConfig":"46"},{"size":1280,"mtime":1609664351398,"results":"56","hashOfConfig":"46"},{"size":191,"mtime":1609491557061,"results":"57","hashOfConfig":"46"},{"size":614,"mtime":1609491557059,"results":"58","hashOfConfig":"46"},{"size":479,"mtime":1605506144409,"results":"59","hashOfConfig":"46"},{"size":408,"mtime":1609504816513,"results":"60","hashOfConfig":"46"},{"size":501,"mtime":1605819223470,"results":"61","hashOfConfig":"46"},{"size":888,"mtime":1610874385345,"results":"62","hashOfConfig":"46"},{"size":1939,"mtime":1610874385344,"results":"63","hashOfConfig":"46"},{"size":3428,"mtime":1610874385341,"results":"64","hashOfConfig":"46"},{"size":1179,"mtime":1610877908460,"results":"65","hashOfConfig":"46"},{"size":1776,"mtime":1610874385347,"results":"66","hashOfConfig":"46"},{"size":933,"mtime":1610874385353,"results":"67","hashOfConfig":"46"},{"size":7219,"mtime":1610874385339,"results":"68","hashOfConfig":"46"},{"size":1163,"mtime":1610874385354,"results":"69","hashOfConfig":"46"},{"size":225,"mtime":1610874385338,"results":"70","hashOfConfig":"46"},{"size":236,"mtime":1610874385343,"results":"71","hashOfConfig":"46"},{"size":2301,"mtime":1609952240236,"results":"72","hashOfConfig":"46"},{"size":892,"mtime":1609664351408,"results":"73","hashOfConfig":"46"},{"size":304,"mtime":1609664351396,"results":"74","hashOfConfig":"46"},{"size":520,"mtime":1610874385355,"results":"75","hashOfConfig":"46"},{"size":1280,"mtime":1610874385342,"results":"76","hashOfConfig":"46"},{"size":477,"mtime":1609664351397,"results":"77","hashOfConfig":"46"},{"size":709,"mtime":1609683085746,"results":"78","hashOfConfig":"46"},{"size":272,"mtime":1610877908461,"results":"79","hashOfConfig":"46"},{"size":2214,"mtime":1610874385351,"results":"80","hashOfConfig":"46"},{"size":2095,"mtime":1610874385352,"results":"81","hashOfConfig":"46"},{"size":652,"mtime":1610874385340,"results":"82","hashOfConfig":"46"},{"size":305,"mtime":1610874385348,"results":"83","hashOfConfig":"46"},{"size":525,"mtime":1610874385345,"results":"84","hashOfConfig":"46"},{"size":1059,"mtime":1610010631587,"results":"85","hashOfConfig":"46"},{"size":1033,"mtime":1610874385355,"results":"86","hashOfConfig":"46"},{"size":307,"mtime":1610874385346,"results":"87","hashOfConfig":"46"},{"size":766,"mtime":1610112476425,"results":"88","hashOfConfig":"46"},{"size":290,"mtime":1610874385361,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zmf6ak",{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"95"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"95"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"95"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"95"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"95"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["187"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\n\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Revision from \"./components/Revision/Revision\";\r\nimport Questions from \"./components/Questions/Questions\";\r\nimport { setQuestionsAction } from \"./actions\";\r\nimport { Question } from \"./models/Question\";\r\nimport { isQuestionsState } from \"./actions/types\";\r\nimport GlobalStyle from \"./styles/globalStyles\";\r\nimport StyledContent from \"./AppStyle\";\r\n\r\nconst App: React.FC = () => {\r\n  const [questionsLoaded, setQuestionsLoaded] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const setQuestionsFromLocalStorage = () => {\r\n    const questions = JSON.parse(\r\n      localStorage.getItem(\"questions\") || \"[]\"\r\n    ) as Question[];\r\n    isQuestionsState(questions)\r\n      ? dispatch(setQuestionsAction(questions))\r\n      : console.error(\"Questions in local storage are wrong\");\r\n\r\n    setQuestionsLoaded(() => true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestionsFromLocalStorage();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <StyledContent>\r\n          <Switch>\r\n            <Route path=\"/questions\">\r\n              <Questions />\r\n            </Route>\r\n            {/* So it can use the questions in store */}\r\n            <Route path=\"/revision\">\r\n              {questionsLoaded && <Revision />}\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <p>Welcome to Examify!</p>\r\n              <p>\r\n                Try adding questions in the Questions subpage and then answer\r\n                them them in Revision!\r\n              </p>\r\n            </Route>\r\n          </Switch>\r\n          <ToastContainer />\r\n        </StyledContent>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",["188","189"],"C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["190"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["191","192"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",["193","194","195"],"import React from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Editor from \"./Editor\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { QuestionsState, isQuestionsState } from \"../../actions/types\";\r\nimport { setQuestionsAction } from \"../../actions\";\r\nimport Button from \"../common/Button/Button\";\r\nimport StyledDiv from \"./QuestionsStyle\";\r\nimport Dropzone from \"../common/Dropzone/Dropzone\";\r\n\r\n\r\nconst Questions: React.FC = () => {\r\n  const match = useRouteMatch();\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/editor`}>\r\n        <Editor />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <StyledDiv>\r\n          <Link to={`${match.url}/editor`}>\r\n            <Button\r\n              backgroundIcon=\"create\"\r\n              width=\"23rem\"\r\n              height=\"12.4rem\"\r\n              fontSize=\"1.9rem\"\r\n              backgroundIconSize=\"10rem\"\r\n            >\r\n              Edit Questions\r\n            </Button>\r\n          </Link>\r\n          <Dropzone />\r\n          <a\r\n            href={`data:text/plain;charset=utf-8,${encodeURIComponent(\r\n              JSON.stringify(questions)\r\n            )}`}\r\n            download=\"questions.json\"\r\n          >\r\n            <Button\r\n              backgroundIcon=\"get_app\"\r\n              width=\"17.5rem\"\r\n              height=\"9.6rem\"\r\n              backgroundIconSize=\"7rem\"\r\n            >\r\n              Download Questions\r\n            </Button>\r\n          </a>\r\n        </StyledDiv>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["196"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Redirect, useParams } from \"react-router\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport {\r\n  addQuestionAction,\r\n  editQuestionAction,\r\n  deleteQuestionAction,\r\n} from \"../../actions\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport AnswerField from \"../common/AnswerField/AnswerField\";\r\nimport StyledDiv from \"./EditQuestionStyle\";\r\nimport Button from \"../common/Button/Button\";\r\nimport QuestionField from \"../common/QuestionField/QuestionField\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst EditQuestion: React.FC = () => {\r\n  const { questionId }: { questionId: string | undefined } = useParams();\r\n  const [questionText, setQuestionText] = useState(\"\");\r\n  const [answers, setAnswers] = useState<string[]>([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState<number[]>([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const questionFromStore = useTypedSelector(({ questions }) =>\r\n    questions.find(({ id }) => id === questionId)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const updateQuestion = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    setQuestionText(() => value);\r\n  };\r\n\r\n  const updateAnswer = (answerText: string, answerIdx: number) => {\r\n    setAnswers((prev) => {\r\n      return prev.map((answer, idx) =>\r\n        idx === answerIdx ? answerText : answer\r\n      );\r\n    });\r\n  };\r\n\r\n  const switchAnswer = (idx: number) => {\r\n    correctAnswers.includes(idx)\r\n      ? setCorrectAnswers((prev) => prev.filter((answer) => answer !== idx))\r\n      : setCorrectAnswers((prev) => [...prev, idx].sort((a, b) => a - b));\r\n  };\r\n\r\n  const addNewAnswer = (answerText = \"\") =>\r\n    setAnswers((prev) => [...prev, answerText]);\r\n\r\n  const removeLastAnswer = () => {\r\n    setCorrectAnswers((prev) =>\r\n      prev.filter((correctAnswerId) => correctAnswerId !== answers.length - 1)\r\n    );\r\n    setAnswers((prev) => prev.filter((_, idx) => idx !== prev.length - 1));\r\n  };\r\n\r\n  const resolveSecret = () => {\r\n    const nextLetter = (letter: string) => {\r\n      return String.fromCharCode(letter.charCodeAt(0) + 1);\r\n    };\r\n\r\n    if (questionText.indexOf(\"Answer:\") < 0) {\r\n      return;\r\n    }\r\n\r\n    let currentQuestionBeginning = \"A.\";\r\n\r\n    const newQuestionText = questionText.slice(\r\n      0,\r\n      questionText.indexOf(currentQuestionBeginning)\r\n    );\r\n\r\n    let questionReminder = questionText;\r\n\r\n    const newAnswers: string[] = [];\r\n    do {\r\n      questionReminder = questionReminder.slice(\r\n        questionReminder.indexOf(currentQuestionBeginning)\r\n      );\r\n      currentQuestionBeginning = `${nextLetter(currentQuestionBeginning)}.`;\r\n      const nextEndIndex = questionReminder.indexOf(currentQuestionBeginning);\r\n      newAnswers.push(\r\n        questionReminder.slice(\r\n          0,\r\n          nextEndIndex > -1 ? nextEndIndex : questionReminder.indexOf(\"Answer:\")\r\n        )\r\n      );\r\n    } while (questionReminder.indexOf(currentQuestionBeginning) > -1);\r\n\r\n    const newCorrectAnswer =\r\n      questionReminder[questionReminder.indexOf(\"Answer: \") + 8].charCodeAt(0) -\r\n      65;\r\n\r\n    setQuestionText(() => newQuestionText);\r\n    setAnswers(() => newAnswers);\r\n    setCorrectAnswers(() => [newCorrectAnswer]);\r\n  };\r\n\r\n  const isQuestionValid = () => {\r\n    if (questionText.trim().localeCompare(\"\") === 0) {\r\n      console.warn(\"Question text is required\");\r\n      toast.error(\"Question text is required\");\r\n      return false;\r\n    }\r\n    if (answers.length === 0) {\r\n      console.warn(\"Answers are required\");\r\n      toast.error(\"Answers are required\");\r\n      return false;\r\n    }\r\n    for (const answer of answers) {\r\n      if (answer.trim().localeCompare(\"\") === 0) {\r\n        console.warn(\"All answer texts are required\");\r\n        toast.error(\"All answer texts are required\");\r\n        return false;\r\n      }\r\n    }\r\n    if (correctAnswers.length === 0) {\r\n      console.warn(\"At least one answer has to be correct\");\r\n      toast.error(\"At least one answer has to be correct\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const addQuestionAndRedirect = () => {\r\n    resolveSecret();\r\n    if (!isQuestionValid()) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addQuestionAction({\r\n        id: uuidv4(),\r\n        question: questionText.trim(),\r\n        answers: Object.entries(answers).map(([_, answer]) => answer.trim()),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const editQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(\r\n      editQuestionAction({\r\n        id: questionId,\r\n        question: questionText,\r\n        answers: Object.entries(answers).map(([_, answer]) => answer),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const deleteQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(deleteQuestionAction(questionId));\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const setQuestionData = () => {\r\n    const q = questionFromStore;\r\n    if (!q) return;\r\n    setQuestionText(() => q.question);\r\n    q.answers.forEach((answer, idx) => {\r\n      addNewAnswer(answer);\r\n      if (q.correctAnswers.indexOf(idx) > -1) {\r\n        switchAnswer(idx);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (questionId) {\r\n      setQuestionData();\r\n    }\r\n  }, [questionFromStore]);\r\n\r\n  return (\r\n    <StyledDiv>\r\n      <p>Question:</p>\r\n      <QuestionField\r\n        text={questionText}\r\n        onChange={updateQuestion}\r\n      ></QuestionField>\r\n      <p>Answers:</p>\r\n      <div className=\"answers\">\r\n        {answers.map((answer, idx) => (\r\n          <AnswerField\r\n            key={idx}\r\n            text={answer}\r\n            onChangeText={(e) => updateAnswer(e.target.value, idx)}\r\n            defaultChecked={correctAnswers.includes(idx)}\r\n            isChecked={correctAnswers.includes(idx)}\r\n            onChangeCheckbox={() => switchAnswer(idx)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"answersButtons\">\r\n        <Button\r\n          backgroundIcon=\"add\"\r\n          width=\"5rem\"\r\n          height=\"5rem\"\r\n          backgroundIconSize=\"3rem\"\r\n          onClick={() => addNewAnswer()}\r\n        ></Button>\r\n        <Button\r\n          backgroundIcon=\"remove\"\r\n          width=\"5rem\"\r\n          height=\"5rem\"\r\n          backgroundIconSize=\"3rem\"\r\n          onClick={removeLastAnswer}\r\n        ></Button>\r\n      </div>\r\n      <div className=\"questionButtons\">\r\n        {questionId ? (\r\n          <>\r\n            <Button onClick={editQuestionAndRedirect}>Save Question</Button>\r\n            <Button onClick={deleteQuestionAndRedirect}>Delete Question</Button>\r\n          </>\r\n        ) : (\r\n          <Button onClick={addQuestionAndRedirect}>Save Question</Button>\r\n        )}\r\n      </div>\r\n      {redirect && <Redirect to=\"/questions/editor\" />}\r\n    </StyledDiv>\r\n  );\r\n};\r\n\r\nexport default EditQuestion;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx",["197"],"import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { isQuestionsState, QuestionsState } from \"../../../actions/types\";\r\nimport { setQuestionsAction } from \"../../../actions\";\r\nimport StyledDropzone from \"./DropzoneStyle\";\r\n\r\nconst Dropzone: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const questionsStateFromString = (contents: string) => {\r\n    try {\r\n      const parsedFileContents = JSON.parse(contents);\r\n      if (!isQuestionsState(parsedFileContents)) {\r\n        console.warn(\"File isn't in the correct questions format (.json)\");\r\n        toast.error(\"File isn't in the correct questions format (.json)\");\r\n        return;\r\n      }\r\n      return parsedFileContents as QuestionsState;\r\n    } catch (e) {\r\n      console.warn(\"Couldn't parse file contents as JSON\");\r\n      toast.error(\"Couldn't parse file contents as JSON\");\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => {\r\n      console.warn(\"File reading was aborted\");\r\n      toast.error(\"File reading was aborted\");\r\n    };\r\n    reader.onerror = (e) => {\r\n      console.warn(e);\r\n      toast.error(e);\r\n    };\r\n    reader.onload = (e) => {\r\n      if (typeof e.target?.result !== \"string\") {\r\n        console.warn(\"Couldn't get string from file\");\r\n        toast.error(\"Couldn't get string from file\");\r\n        return;\r\n      }\r\n      const questionsState = questionsStateFromString(e.target.result);\r\n      questionsState && dispatch(setQuestionsAction(questionsState));\r\n    };\r\n    reader.readAsText(file);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <StyledDropzone {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\".json\" />\r\n      <div className=\"buttonIcon\">\r\n        <i className=\"material-icons\">publish</i>\r\n      </div>\r\n      {isDragActive ? (\r\n        <span>Drop the questions file here...</span>\r\n      ) : (\r\n        <span>Drag and drop here or click to upload the questions file</span>\r\n      )}\r\n    </StyledDropzone>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx",["198"],"import React from \"react\";\r\nimport StyledQuestion from \"./QuestionListElementStyle\";\r\n\r\ntype Props = {};\r\n\r\nconst QuestionListElement: React.FC = ({ children }) => {\r\n  return (\r\n    <StyledQuestion>\r\n      <span>{children}</span>\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default QuestionListElement;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerField.tsx",["199"],"import React, { createRef, useEffect } from \"react\";\r\n\r\nimport StyledAnswer from \"./AnswerFieldStyle\";\r\nimport setupAutoResize from \"../../../utils/setupAutoResize\";\r\n\r\ntype Props = {\r\n  text?: string;\r\n  onChangeText?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  textareaReadOnly?: boolean;\r\n  checkboxReadOnly?: boolean;\r\n  defaultChecked?: boolean;\r\n  isChecked: boolean;\r\n  isHighlighted?: boolean;\r\n  fullBodyCheckbox?: boolean;\r\n  onChangeCheckbox?: (\r\n    event:\r\n      | React.ChangeEvent<HTMLInputElement>\r\n      | React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => void;\r\n};\r\n\r\nconst AnswerField: React.FC<Props> = ({\r\n  text,\r\n  onChangeText,\r\n  textareaReadOnly = false,\r\n  checkboxReadOnly = false,\r\n  defaultChecked = false,\r\n  isChecked,\r\n  isHighlighted = false,\r\n  fullBodyCheckbox = false,\r\n  onChangeCheckbox,\r\n}) => {\r\n  const textAreaRef = createRef<HTMLTextAreaElement>();\r\n\r\n  useEffect(() => setupAutoResize(textAreaRef), []);\r\n\r\n  return (\r\n    <StyledAnswer\r\n      className=\"answer\"\r\n      textareaReadOnly={textareaReadOnly}\r\n      checkboxReadOnly={checkboxReadOnly}\r\n      isHighlighted={isHighlighted}\r\n      fullBodyCheckbox={fullBodyCheckbox}\r\n      onClick={fullBodyCheckbox ? onChangeCheckbox : undefined}\r\n    >\r\n      {textareaReadOnly ? (\r\n        <div className=\"answerText\">\r\n          <span>{text}</span>\r\n        </div>\r\n      ) : (\r\n        <textarea\r\n          ref={textAreaRef}\r\n          rows={1}\r\n          value={text}\r\n          onChange={onChangeText}\r\n        ></textarea>\r\n      )}\r\n      <div className=\"answerIcons\">\r\n        {textareaReadOnly || <i className=\"material-icons\">create</i>}\r\n        <div className=\"checkbox\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={onChangeCheckbox}\r\n            defaultChecked={defaultChecked}\r\n            readOnly={checkboxReadOnly}\r\n          ></input>\r\n          {isChecked ? (\r\n            <i className=\"material-icons iconChecked\">done</i>\r\n          ) : (\r\n            <i className=\"material-icons iconUnchecked\">close</i>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </StyledAnswer>\r\n  );\r\n};\r\n\r\nexport default AnswerField;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\AnswerField\\AnswerFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestionStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionField.tsx",["200"],"import React from \"react\";\r\n\r\nimport StyledQuestion from \"./QuestionFieldStyle\";\r\n\r\ntype Props = {\r\n  text?: string;\r\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  readonly?: boolean\r\n};\r\n\r\nconst QuestionField: React.FC<Props> = ({\r\n  text,\r\n  onChange,\r\n  readonly = false,\r\n}) => {\r\n  return (\r\n    <StyledQuestion\r\n      className=\"question\"\r\n      textareaReadOnly={readonly}\r\n    >\r\n      {readonly ? (\r\n        <div className=\"questionText\">\r\n          <span>{text}</span>\r\n        </div>\r\n      ) : (\r\n        <textarea rows={4} value={text} onChange={onChange}></textarea>\r\n      )}\r\n      <div className=\"questionIcons\">\r\n        {readonly || <i className=\"material-icons\">create</i>}\r\n      </div>\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default QuestionField;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionField\\QuestionFieldStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpageStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\setupAutoResize.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\wdyr.ts",[],{"ruleId":"201","severity":1,"message":"202","line":33,"column":6,"nodeType":"203","endLine":33,"endColumn":8,"suggestions":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":4,"column":3,"nodeType":"211","messageId":"212","endLine":4,"endColumn":18},{"ruleId":"209","severity":1,"message":"213","line":11,"column":8,"nodeType":"211","messageId":"212","endLine":11,"endColumn":14},{"ruleId":"201","severity":1,"message":"214","line":157,"column":6,"nodeType":"203","endLine":157,"endColumn":20,"suggestions":"215"},{"ruleId":"209","severity":1,"message":"216","line":7,"column":10,"nodeType":"211","messageId":"212","endLine":7,"endColumn":24},{"ruleId":"209","severity":1,"message":"217","line":7,"column":26,"nodeType":"211","messageId":"212","endLine":7,"endColumn":42},{"ruleId":"209","severity":1,"message":"218","line":8,"column":10,"nodeType":"211","messageId":"212","endLine":8,"endColumn":28},{"ruleId":"201","severity":1,"message":"219","line":186,"column":6,"nodeType":"203","endLine":186,"endColumn":25,"suggestions":"220"},{"ruleId":"201","severity":1,"message":"221","line":50,"column":6,"nodeType":"203","endLine":50,"endColumn":8,"suggestions":"222"},{"ruleId":"209","severity":1,"message":"223","line":4,"column":6,"nodeType":"211","messageId":"212","endLine":4,"endColumn":11},{"ruleId":"201","severity":1,"message":"224","line":35,"column":49,"nodeType":"203","endLine":35,"endColumn":51,"suggestions":"225"},{"ruleId":"201","severity":1,"message":"224","line":19,"column":49,"nodeType":"203","endLine":19,"endColumn":51,"suggestions":"226"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["227"],"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["230"],"'QuestionsState' is defined but never used.","'isQuestionsState' is defined but never used.","'setQuestionsAction' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["231"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["232"],"'Props' is defined but never used.","React Hook useEffect has a missing dependency: 'textAreaRef'. Either include it or remove the dependency array.",["233"],["234"],{"desc":"235","fix":"236"},"no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"243","fix":"245"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"246","text":"247"},"Update the dependencies array to be: [dispatch, questionIds.length, questions, revisionType]",{"range":"248","text":"249"},"Update the dependencies array to be: [questionFromStore, questionId, setQuestionData]",{"range":"250","text":"251"},"Update the dependencies array to be: [dispatch]",{"range":"252","text":"253"},"Update the dependencies array to be: [textAreaRef]",{"range":"254","text":"255"},{"range":"256","text":"255"},[1200,1202],"[setQuestionsFromLocalStorage]",[4943,4957],"[dispatch, questionIds.length, questions, revisionType]",[5551,5570],"[questionFromStore, questionId, setQuestionData]",[1759,1761],"[dispatch]",[964,966],"[textAreaRef]",[509,511]]