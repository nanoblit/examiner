[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts":"26","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Dropzone\\Dropzone.tsx":"27","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Dropzone\\DropzoneStyle.ts":"28"},{"size":693,"mtime":1605311735663,"results":"29","hashOfConfig":"30"},{"size":1607,"mtime":1609658697818,"results":"31","hashOfConfig":"30"},{"size":1295,"mtime":1605985412425,"results":"32","hashOfConfig":"30"},{"size":1119,"mtime":1605985318735,"results":"33","hashOfConfig":"30"},{"size":479,"mtime":1609504816532,"results":"34","hashOfConfig":"30"},{"size":6327,"mtime":1609658697822,"results":"35","hashOfConfig":"30"},{"size":472,"mtime":1609504816513,"results":"36","hashOfConfig":"30"},{"size":1680,"mtime":1609658697820,"results":"37","hashOfConfig":"30"},{"size":1568,"mtime":1605985332095,"results":"38","hashOfConfig":"30"},{"size":369,"mtime":1609658697824,"results":"39","hashOfConfig":"30"},{"size":1185,"mtime":1609491557060,"results":"40","hashOfConfig":"30"},{"size":191,"mtime":1609491557061,"results":"41","hashOfConfig":"30"},{"size":614,"mtime":1609491557059,"results":"42","hashOfConfig":"30"},{"size":479,"mtime":1605506144409,"results":"43","hashOfConfig":"30"},{"size":408,"mtime":1609504816513,"results":"44","hashOfConfig":"30"},{"size":501,"mtime":1605819223470,"results":"45","hashOfConfig":"30"},{"size":480,"mtime":1609491557055,"results":"46","hashOfConfig":"30"},{"size":1275,"mtime":1609504816529,"results":"47","hashOfConfig":"30"},{"size":1497,"mtime":1605986623049,"results":"48","hashOfConfig":"30"},{"size":950,"mtime":1609491557057,"results":"49","hashOfConfig":"30"},{"size":1426,"mtime":1609491557056,"results":"50","hashOfConfig":"30"},{"size":866,"mtime":1609658697823,"results":"51","hashOfConfig":"30"},{"size":6115,"mtime":1609658747002,"results":"52","hashOfConfig":"30"},{"size":1195,"mtime":1609658697823,"results":"53","hashOfConfig":"30"},{"size":187,"mtime":1609658697819,"results":"54","hashOfConfig":"30"},{"size":223,"mtime":1609658697821,"results":"55","hashOfConfig":"30"},{"size":1937,"mtime":1609658697819,"results":"56","hashOfConfig":"30"},{"size":902,"mtime":1609658697820,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"zmf6ak",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],["121","122"],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["123"],"C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["124"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["125","126"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { shuffle } from \"../../utils/shuffle\";\r\nimport { editQuestionAction, setQuestionsAction } from \"../../actions\";\r\nimport RevisionTypeSelectionSubpage from \"./RevisionTypeSelectionSubpage\";\r\nimport FinalScoreSubpage from \"./FinalScoreSubpage\";\r\nimport QuestionSubpage from \"./QuestionSubpage\";\r\nimport AnswerSubpage from \"./AnswerSubpage\";\r\n\r\nexport enum RevisionType {\r\n  None,\r\n  NewSession,\r\n  ContinueLastSession,\r\n  IncorrectAndUnansweredQuestions,\r\n}\r\n\r\n/*\r\n- When you open the revision sub-page it asks if you want to continue or start a new session.\r\n- If you choose to start a new session, it takes all the unanswered questions and puts them in questionIndexes\r\n- Otherwise it acts normally.\r\n*/\r\n\r\nconst Revision: React.FC = () => {\r\n  const [revisionType, setRevisionType] = useState(RevisionType.None);\r\n  const [score, setScore] = useState(0);\r\n  const [maxScore, setMaxScore] = useState(0);\r\n  const [questionIds, setQuestionIds] = useState<string[]>([]);\r\n  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n  const [answered, setAnswered] = useState(false);\r\n  const currentId = useMemo(\r\n    () => (questionIds.length > 0 ? questionIds[0] : \"\"),\r\n    [questionIds]\r\n  );\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n  const currentQuestion = useMemo(\r\n    () => questions.find(({ id }) => currentId === id),\r\n    [currentId]\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const tryAgain = () => {\r\n    dispatch(\r\n      setQuestionsAction(\r\n        questions.map((question) => {\r\n          return { ...question, lastAnsweredCorrectly: undefined };\r\n        })\r\n      )\r\n    );\r\n    setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n    setScore(() => 0);\r\n    setMaxScore(() => 0);\r\n    setAnswered(() => false);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setAnswered(() => false);\r\n    setSelectedAnswers(() => []);\r\n    // Remove first question index.\r\n    setQuestionIds((prev) => [...prev.filter((_, idx) => idx !== 0)]);\r\n  };\r\n\r\n  const finishAnswering = () => {\r\n    setSelectedAnswers(() => []);\r\n    // Because current index is taken from question indexes.\r\n    setQuestionIds(() => []);\r\n  };\r\n\r\n  const countCorrectAnswers = () => {\r\n    let correctAnswers = 0;\r\n    selectedAnswers.forEach((answer) => {\r\n      if (\r\n        currentQuestion?.correctAnswers.some(\r\n          (correctAnswer) => correctAnswer === answer\r\n        )\r\n      ) {\r\n        correctAnswers++;\r\n      }\r\n    });\r\n\r\n    return correctAnswers;\r\n  };\r\n\r\n  const submitAnswer = () => {\r\n    const correctAnswers = countCorrectAnswers();\r\n    if (currentQuestion === undefined) {\r\n      return;\r\n    }\r\n    const questionCorrectlyAnsweredCount =\r\n      currentQuestion.correctlyAnsweredCount ?? 0;\r\n    const questionTotalAnsweredCount = currentQuestion.totalAnsweredCount ?? 0;\r\n\r\n    dispatch(\r\n      editQuestionAction({\r\n        ...currentQuestion,\r\n        lastAnsweredCorrectly:\r\n          correctAnswers === currentQuestion.correctAnswers.length\r\n            ? true\r\n            : false,\r\n        totalAnsweredCount: questionTotalAnsweredCount + 1,\r\n        correctlyAnsweredCount:\r\n          questionCorrectlyAnsweredCount +\r\n          (correctAnswers === currentQuestion.correctAnswers.length ? 1 : 0),\r\n      })\r\n    );\r\n    setScore((prev) => {\r\n      const newPrev = (prev +=\r\n        correctAnswers / currentQuestion.correctAnswers.length);\r\n      return isNaN(newPrev) ? 0 : newPrev;\r\n    });\r\n    setMaxScore((prev) => (prev += 1));\r\n    setAnswered(() => true);\r\n  };\r\n\r\n  const countScore = () => `${Math.round(score * 100) / 100}/${maxScore}`;\r\n\r\n  // give correct questions based on revisionType\r\n  useEffect(() => {\r\n    if (questionIds.length === 0) {\r\n      switch (revisionType) {\r\n        case RevisionType.NewSession:\r\n          dispatch(\r\n            setQuestionsAction(\r\n              questions.map((question) => {\r\n                return { ...question, lastAnsweredCorrectly: undefined };\r\n              })\r\n            )\r\n          );\r\n          setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n          break;\r\n        case RevisionType.ContinueLastSession:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(\r\n                  ({ lastAnsweredCorrectly }) =>\r\n                    lastAnsweredCorrectly === undefined\r\n                )\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        case RevisionType.IncorrectAndUnansweredQuestions:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(({ lastAnsweredCorrectly }) => !lastAnsweredCorrectly)\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  }, [revisionType]);\r\n\r\n  const render = () => {\r\n    if (revisionType === RevisionType.None) {\r\n      return <RevisionTypeSelectionSubpage setRevisionType={setRevisionType} />;\r\n    } else if (currentId === \"\") {\r\n      return (\r\n        <FinalScoreSubpage\r\n          tryAgain={tryAgain}\r\n          questions={questions}\r\n          score={countScore()}\r\n        />\r\n      );\r\n    } else if (!answered) {\r\n      return (\r\n        currentQuestion && (\r\n          <QuestionSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            submitAnswer={submitAnswer}\r\n            setSelectedAnswers={setSelectedAnswers}\r\n          />\r\n        )\r\n      );\r\n    } else {\r\n      return (\r\n        currentQuestion && (\r\n          <AnswerSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            buttons={\r\n              <>\r\n                {questionIds.length > 1 && (\r\n                  <button onClick={nextQuestion}>Next Question</button>\r\n                )}\r\n                <button onClick={finishAnswering}>Finish</button>\r\n              </>\r\n            }\r\n          />\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return <>{render()}</>;\r\n};\r\n\r\nexport default Revision;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",["127","128","129"],"import React from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport Editor from \"./Editor\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { QuestionsState, isQuestionsState } from \"../../actions/types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setQuestionsAction } from \"../../actions\";\r\n\r\nconst Questions: React.FC = () => {\r\n  const match = useRouteMatch();\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n  const dispatch = useDispatch();\r\n\r\n  const questionsStateFromString = (contents: string) => {\r\n    try {\r\n      const parsedFileContents = JSON.parse(contents);\r\n      if (!isQuestionsState(parsedFileContents)) {\r\n        console.log(\"File isn't in correct questions format\"); \r\n        return;\r\n      }\r\n      return parsedFileContents as QuestionsState;\r\n    } catch (e) {\r\n      console.log(\"Couldn't parse file contents as JSON\");\r\n    }\r\n  }\r\n\r\n  const saveQuestionsState = (fileList: FileList) => {\r\n    if (fileList.length < 1) {\r\n      return;\r\n    }\r\n    const file = fileList[0];\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.addEventListener('load', (e) => {\r\n      if (typeof e.target?.result !== \"string\") {\r\n        console.log(\"Couldn't get string from file\");\r\n        return;\r\n      }\r\n      const questionsState = questionsStateFromString(e.target.result);\r\n      questionsState && dispatch(setQuestionsAction(questionsState));\r\n    })\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/editor`}>\r\n        <Editor />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <Link to={`${match.url}/editor`}>Edit Questions</Link>\r\n        <br />\r\n        Upload Questions\r\n        <input type=\"file\" accept=\".json\" onChange={(e) => e.target.files && saveQuestionsState(e.target.files)}></input>\r\n        <br />\r\n        <a\r\n          href={`data:text/plain;charset=utf-8,${encodeURIComponent(\r\n            JSON.stringify(questions)\r\n          )}`}\r\n          download=\"questions.json\"\r\n        >\r\n          Download Questions\r\n        </a>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",["130"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditQuestion from \"./EditQuestion\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\n\r\nconst Editor: React.FC = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const match = useRouteMatch();\r\n\r\n  const questions = useTypedSelector(({ questions }) =>\r\n    questions\r\n      .filter(\r\n        ({ question }) =>\r\n          question.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n      )\r\n      .sort((a, b) => (a.question < b.question ? -1 : 1))\r\n  );\r\n\r\n  const updateSearch = (text: string) => {\r\n    setSearch(() => text);\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/addQuestion`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={`${match.path}/:questionId`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <div>\r\n          <input\r\n            placeholder=\"Search\"\r\n            value={search}\r\n            onChange={(e) => updateSearch(e.target.value)}\r\n          />\r\n          <Link to={`${match.url}/addQuestion`}>\r\n            <button>Add New Question</button>\r\n          </Link>\r\n          {questions.map(({ question, id }) => (\r\n            <Link key={id} to={`${match.url}/${id}`}>\r\n              <p>{question}</p>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["131"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Dropzone\\Dropzone.tsx",["132"],"import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { isQuestionsState, QuestionsState } from \"../../actions/types\";\r\nimport { setQuestionsAction } from \"../../actions\";\r\nimport StyledDropzone from \"./DropzoneStyle\";\r\n\r\nconst Dropzone: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const questionsStateFromString = (contents: string) => {\r\n    try {\r\n      const parsedFileContents = JSON.parse(contents);\r\n      if (!isQuestionsState(parsedFileContents)) {\r\n        console.log(\"File isn't in correct questions format\");\r\n        return;\r\n      }\r\n      return parsedFileContents as QuestionsState;\r\n    } catch (e) {\r\n      console.log(\"Couldn't parse file contents as JSON\");\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"file reading was aborted\");\r\n    reader.onerror = (e) => console.log(e);\r\n    reader.onload = (e) => {\r\n      if (typeof e.target?.result !== \"string\") {\r\n        console.log(\"Couldn't get string from file\");\r\n        return;\r\n      }\r\n      const questionsState = questionsStateFromString(e.target.result);\r\n      questionsState && dispatch(setQuestionsAction(questionsState));\r\n    };\r\n    reader.readAsText(file);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <StyledDropzone {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\".json\" />\r\n      <div className=\"buttonIcon\">\r\n        <i className=\"material-icons\">publish</i>\r\n      </div>\r\n      {isDragActive ? (\r\n        <span>Drop the questions file here...</span>\r\n      ) : (\r\n        <span>Drag and drop here or click to upload questions file</span>\r\n      )}\r\n    </StyledDropzone>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Dropzone\\DropzoneStyle.ts",["133"],"import styled from \"styled-components\";\r\nimport { borderRadius, buttonColor, grayColor } from \"../../styles/values\";\r\n\r\n\r\n\r\nconst StyledDropzone = styled.div`\r\n  border: none;\r\n  background: white;\r\n  box-shadow: inset 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  padding: 5px 10px;\r\n  border-radius: ${borderRadius};\r\n  position: relative;\r\n  cursor: pointer;\r\n  outline: none;\r\n  width: 17.5rem;\r\n  height: 9.6rem;\r\n\r\n  .buttonIcon {\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    i {\r\n      cursor: pointer;\r\n      color: ${grayColor};\r\n      font-size: 7rem;\r\n    }\r\n  }\r\n\r\n  span {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: relative;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default StyledDropzone;",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":31,"column":6,"nodeType":"140","endLine":31,"endColumn":8,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":4,"column":3,"nodeType":"144","messageId":"145","endLine":4,"endColumn":18},{"ruleId":"138","severity":1,"message":"146","line":39,"column":5,"nodeType":"140","endLine":39,"endColumn":16,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"148","line":157,"column":6,"nodeType":"140","endLine":157,"endColumn":20,"suggestions":"149"},{"ruleId":"142","severity":1,"message":"150","line":7,"column":10,"nodeType":"144","messageId":"145","endLine":7,"endColumn":24},{"ruleId":"142","severity":1,"message":"151","line":7,"column":26,"nodeType":"144","messageId":"145","endLine":7,"endColumn":42},{"ruleId":"142","severity":1,"message":"152","line":8,"column":10,"nodeType":"144","messageId":"145","endLine":8,"endColumn":28},{"ruleId":"142","severity":1,"message":"153","line":1,"column":27,"nodeType":"144","messageId":"145","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"154","line":171,"column":6,"nodeType":"140","endLine":171,"endColumn":8,"suggestions":"155"},{"ruleId":"138","severity":1,"message":"156","line":40,"column":6,"nodeType":"140","endLine":40,"endColumn":8,"suggestions":"157"},{"ruleId":"142","severity":1,"message":"158","line":2,"column":24,"nodeType":"144","messageId":"145","endLine":2,"endColumn":35},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["161"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'questions'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'dispatch', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["163"],"'QuestionsState' is defined but never used.","'isQuestionsState' is defined but never used.","'setQuestionsAction' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["164"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["165"],"'buttonColor' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"176","text":"177"},"Update the dependencies array to be: [currentId, questions]",{"range":"178","text":"179"},"Update the dependencies array to be: [dispatch, questionIds.length, questions, revisionType]",{"range":"180","text":"181"},"Update the dependencies array to be: [questionId, setQuestionData]",{"range":"182","text":"183"},"Update the dependencies array to be: [dispatch]",{"range":"184","text":"185"},[1097,1099],"[setQuestionsFromLocalStorage]",[1542,1553],"[currentId, questions]",[5004,5018],"[dispatch, questionIds.length, questions, revisionType]",[4964,4966],"[questionId, setQuestionData]",[1399,1401],"[dispatch]"]