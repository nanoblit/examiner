[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25"},{"size":693,"mtime":1605311735663,"results":"26","hashOfConfig":"27"},{"size":1607,"mtime":1609507034604,"results":"28","hashOfConfig":"27"},{"size":1295,"mtime":1605985412425,"results":"29","hashOfConfig":"27"},{"size":1119,"mtime":1605985318735,"results":"30","hashOfConfig":"27"},{"size":479,"mtime":1609504816532,"results":"31","hashOfConfig":"27"},{"size":6327,"mtime":1609507151938,"results":"32","hashOfConfig":"27"},{"size":472,"mtime":1609504816513,"results":"33","hashOfConfig":"27"},{"size":2250,"mtime":1609509608448,"results":"34","hashOfConfig":"27"},{"size":1568,"mtime":1605985332095,"results":"35","hashOfConfig":"27"},{"size":187,"mtime":1609504816533,"results":"36","hashOfConfig":"27"},{"size":1185,"mtime":1609491557060,"results":"37","hashOfConfig":"27"},{"size":191,"mtime":1609491557061,"results":"38","hashOfConfig":"27"},{"size":614,"mtime":1609491557059,"results":"39","hashOfConfig":"27"},{"size":479,"mtime":1605506144409,"results":"40","hashOfConfig":"27"},{"size":501,"mtime":1605819223470,"results":"41","hashOfConfig":"27"},{"size":480,"mtime":1609491557055,"results":"42","hashOfConfig":"27"},{"size":1275,"mtime":1609504816529,"results":"43","hashOfConfig":"27"},{"size":1497,"mtime":1605986623049,"results":"44","hashOfConfig":"27"},{"size":950,"mtime":1609491557057,"results":"45","hashOfConfig":"27"},{"size":1426,"mtime":1609491557056,"results":"46","hashOfConfig":"27"},{"size":779,"mtime":1609509879644,"results":"47","hashOfConfig":"27"},{"size":6115,"mtime":1609504816521,"results":"48","hashOfConfig":"27"},{"size":1038,"mtime":1609510413630,"results":"49","hashOfConfig":"27"},{"size":408,"mtime":1609504816513,"results":"50","hashOfConfig":"27"},{"size":182,"mtime":1609506978278,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"zmf6ak",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],["106","107"],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["108"],"C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["109"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["110","111"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",["112"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditQuestion from \"./EditQuestion\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\n\r\nconst Editor: React.FC = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const match = useRouteMatch();\r\n\r\n  const questions = useTypedSelector(({ questions }) =>\r\n    questions\r\n      .filter(\r\n        ({ question }) =>\r\n          question.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n      )\r\n      .sort((a, b) => (a.question < b.question ? -1 : 1))\r\n  );\r\n\r\n  const updateSearch = (text: string) => {\r\n    setSearch(() => text);\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/addQuestion`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={`${match.path}/:questionId`}>\r\n        <EditQuestion />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <div>\r\n          <input\r\n            placeholder=\"Search\"\r\n            value={search}\r\n            onChange={(e) => updateSearch(e.target.value)}\r\n          />\r\n          <Link to={`${match.url}/addQuestion`}>\r\n            <button>Add New Question</button>\r\n          </Link>\r\n          {questions.map(({ question, id }) => (\r\n            <Link key={id} to={`${match.url}/${id}`}>\r\n              <p>{question}</p>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["113"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Redirect, useParams } from \"react-router\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport {\r\n  addQuestionAction,\r\n  editQuestionAction,\r\n  deleteQuestionAction,\r\n} from \"../../actions\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\n\r\nconst EditQuestion: React.FC = () => {\r\n  const { questionId }: { questionId: string | undefined } = useParams();\r\n  const [questionText, setQuestionText] = useState(\"\");\r\n  const [answers, setAnswers] = useState<string[]>([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState<number[]>([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const questionFromStore = useTypedSelector(({ questions }) =>\r\n    questions.find(({ id }) => id === questionId)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const updateQuestion = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    setQuestionText(() => value);\r\n  };\r\n\r\n  const updateAnswer = (answerText: string, answerIdx: number) => {\r\n    setAnswers((prev) => {\r\n      return prev.map((answer, idx) =>\r\n        idx === answerIdx ? answerText : answer\r\n      );\r\n    });\r\n  };\r\n\r\n  const switchAnswer = (idx: number) => {\r\n    correctAnswers.includes(idx)\r\n      ? setCorrectAnswers((prev) => prev.filter((answer) => answer !== idx))\r\n      : setCorrectAnswers((prev) => [...prev, idx].sort((a, b) => a - b));\r\n  };\r\n\r\n  const addNewAnswer = (answerText = \"\") =>\r\n    setAnswers((prev) => [...prev, answerText]);\r\n\r\n  const removeLastAnswer = () => {\r\n    setCorrectAnswers((prev) =>\r\n      prev.filter((correctAnswerId) => correctAnswerId !== answers.length - 1)\r\n    );\r\n    setAnswers((prev) => prev.filter((_, idx) => idx !== prev.length - 1));\r\n  };\r\n\r\n  const resolveSecret = () => {\r\n    const nextLetter = (letter: string) => {\r\n      return String.fromCharCode(letter.charCodeAt(0) + 1);\r\n    };\r\n\r\n    if (questionText.indexOf(\"Answer:\") < 0) {\r\n      return;\r\n    }\r\n\r\n    let currentQuestionBeginning = \"A.\";\r\n\r\n    const newQuestionText = questionText.slice(\r\n      0,\r\n      questionText.indexOf(currentQuestionBeginning)\r\n    );\r\n\r\n    let questionReminder = questionText;\r\n\r\n    const newAnswers: string[] = [];\r\n    do {\r\n      questionReminder = questionReminder.slice(\r\n        questionReminder.indexOf(currentQuestionBeginning) + 3\r\n      );\r\n      currentQuestionBeginning = `${nextLetter(currentQuestionBeginning)}.`;\r\n      const nextEndIndex = questionReminder.indexOf(currentQuestionBeginning);\r\n      newAnswers.push(\r\n        questionReminder.slice(\r\n          0,\r\n          nextEndIndex > -1 ? nextEndIndex : questionReminder.indexOf(\"Answer:\")\r\n        )\r\n      );\r\n    } while (questionReminder.indexOf(currentQuestionBeginning) > -1);\r\n\r\n    const newCorrectAnswer =\r\n      questionReminder[questionReminder.indexOf(\"Answer: \") + 8].charCodeAt(0) -\r\n      65;\r\n\r\n    setQuestionText(() => newQuestionText);\r\n    setAnswers(() => newAnswers);\r\n    setCorrectAnswers(() => [newCorrectAnswer]);\r\n  };\r\n\r\n  const isQuestionValid = () => {\r\n    if (questionText.trim().localeCompare(\"\") === 0) {\r\n      console.warn(\"Question text is required\");\r\n      return false;\r\n    }\r\n    if (answers.length === 0) {\r\n      console.warn(\"Answers are required\");\r\n      return false;\r\n    }\r\n    for (const answer of answers) {\r\n      if (answer.trim().localeCompare(\"\") === 0) {\r\n        console.warn(\"All answer texts are required\");\r\n        return false;\r\n      }\r\n    }\r\n    if (correctAnswers.length === 0) {\r\n      console.warn(\"At least one answer has to be correct\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const addQuestionAndRedirect = () => {\r\n    resolveSecret();\r\n    if (!isQuestionValid()) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addQuestionAction({\r\n        id: uuidv4(),\r\n        question: questionText.trim(),\r\n        answers: Object.entries(answers).map(([_, answer]) => answer.trim()),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const editQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(\r\n      editQuestionAction({\r\n        id: questionId,\r\n        question: questionText,\r\n        answers: Object.entries(answers).map(([_, answer]) => answer),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const deleteQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(deleteQuestionAction(questionId));\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const setQuestionData = () => {\r\n    const q = questionFromStore;\r\n    if (!q) return;\r\n    setQuestionText(() => q.question);\r\n    q.answers.forEach((answer, idx) => {\r\n      addNewAnswer(answer);\r\n      if (q.correctAnswers.indexOf(idx) > -1) {\r\n        switchAnswer(idx);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    questionId && setQuestionData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Question:</p>\r\n      <textarea value={questionText} onChange={updateQuestion}></textarea>\r\n      <p>Answers:</p>\r\n      <div className=\"answers\">\r\n        {answers.map((answer, idx) => (\r\n          <div key={idx}>\r\n            <textarea\r\n              value={answer}\r\n              onChange={(e) => updateAnswer(e.target.value, idx)}\r\n            ></textarea>\r\n            <input\r\n              type=\"checkbox\"\r\n              defaultChecked={correctAnswers.includes(idx)}\r\n              onChange={() => switchAnswer(idx)}\r\n            ></input>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={() => addNewAnswer()}>+</button>\r\n      <button onClick={removeLastAnswer}>-</button>\r\n      {questionId ? (\r\n        <>\r\n          <button onClick={editQuestionAndRedirect}>Save Question</button>\r\n          <button onClick={deleteQuestionAndRedirect}>Delete Question</button>\r\n        </>\r\n      ) : (\r\n        <button onClick={addQuestionAndRedirect}>Add Question</button>\r\n      )}\r\n      {redirect && <Redirect to=\"/questions/editor\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditQuestion;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":31,"column":6,"nodeType":"120","endLine":31,"endColumn":8,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":4,"column":3,"nodeType":"124","messageId":"125","endLine":4,"endColumn":18},{"ruleId":"118","severity":1,"message":"126","line":39,"column":5,"nodeType":"120","endLine":39,"endColumn":16,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"128","line":157,"column":6,"nodeType":"120","endLine":157,"endColumn":20,"suggestions":"129"},{"ruleId":"122","severity":1,"message":"130","line":1,"column":27,"nodeType":"124","messageId":"125","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"131","line":171,"column":6,"nodeType":"120","endLine":171,"endColumn":8,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["135"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'questions'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has missing dependencies: 'dispatch', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["137"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"147","text":"148"},"Update the dependencies array to be: [currentId, questions]",{"range":"149","text":"150"},"Update the dependencies array to be: [dispatch, questionIds.length, questions, revisionType]",{"range":"151","text":"152"},"Update the dependencies array to be: [questionId, setQuestionData]",{"range":"153","text":"154"},[1097,1099],"[setQuestionsFromLocalStorage]",[1542,1553],"[currentId, questions]",[5004,5018],"[dispatch, questionIds.length, questions, revisionType]",[4964,4966],"[questionId, setQuestionData]"]