[{"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx":"1","C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx":"2","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts":"3","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts":"4","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts":"5","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx":"6","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx":"7","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx":"8","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts":"9","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts":"10","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts":"11","C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts":"12","C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts":"13","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts":"14","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts":"15","C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts":"16","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx":"17","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx":"18","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx":"19","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx":"20","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx":"21","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx":"22","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx":"23","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts":"24","C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts":"25","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts":"26","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx":"27","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts":"28","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx":"29","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts":"30","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts":"31","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx":"32","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts":"33"},{"size":693,"mtime":1605311735663,"results":"34","hashOfConfig":"35"},{"size":1607,"mtime":1609658697818,"results":"36","hashOfConfig":"35"},{"size":1295,"mtime":1605985412425,"results":"37","hashOfConfig":"35"},{"size":1119,"mtime":1605985318735,"results":"38","hashOfConfig":"35"},{"size":479,"mtime":1609504816532,"results":"39","hashOfConfig":"35"},{"size":6327,"mtime":1609658697822,"results":"40","hashOfConfig":"35"},{"size":472,"mtime":1609504816513,"results":"41","hashOfConfig":"35"},{"size":1687,"mtime":1609664351386,"results":"42","hashOfConfig":"35"},{"size":1568,"mtime":1605985332095,"results":"43","hashOfConfig":"35"},{"size":425,"mtime":1609664351399,"results":"44","hashOfConfig":"35"},{"size":1280,"mtime":1609664351398,"results":"45","hashOfConfig":"35"},{"size":191,"mtime":1609491557061,"results":"46","hashOfConfig":"35"},{"size":614,"mtime":1609491557059,"results":"47","hashOfConfig":"35"},{"size":479,"mtime":1605506144409,"results":"48","hashOfConfig":"35"},{"size":408,"mtime":1609504816513,"results":"49","hashOfConfig":"35"},{"size":501,"mtime":1605819223470,"results":"50","hashOfConfig":"35"},{"size":480,"mtime":1609491557055,"results":"51","hashOfConfig":"35"},{"size":1275,"mtime":1609504816529,"results":"52","hashOfConfig":"35"},{"size":1952,"mtime":1609683065765,"results":"53","hashOfConfig":"35"},{"size":950,"mtime":1609491557057,"results":"54","hashOfConfig":"35"},{"size":1426,"mtime":1609491557056,"results":"55","hashOfConfig":"35"},{"size":866,"mtime":1609659488376,"results":"56","hashOfConfig":"35"},{"size":6111,"mtime":1609658784626,"results":"57","hashOfConfig":"35"},{"size":1195,"mtime":1609658697823,"results":"58","hashOfConfig":"35"},{"size":245,"mtime":1609664351386,"results":"59","hashOfConfig":"35"},{"size":223,"mtime":1609658697821,"results":"60","hashOfConfig":"35"},{"size":1947,"mtime":1609664351415,"results":"61","hashOfConfig":"35"},{"size":892,"mtime":1609664351408,"results":"62","hashOfConfig":"35"},{"size":304,"mtime":1609664351396,"results":"63","hashOfConfig":"35"},{"size":545,"mtime":1609683065765,"results":"64","hashOfConfig":"35"},{"size":389,"mtime":1609664351386,"results":"65","hashOfConfig":"35"},{"size":477,"mtime":1609664351397,"results":"66","hashOfConfig":"35"},{"size":709,"mtime":1609683065766,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"zmf6ak",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\Projects\\Web\\examiner\\src\\index.tsx",[],["142","143"],"C:\\Dev\\Projects\\Web\\examiner\\src\\App.tsx",["144"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Revision from \"./components/Revision/Revision\";\r\nimport Questions from \"./components/Questions/Questions\";\r\nimport { setQuestionsAction } from \"./actions\";\r\nimport { Question } from \"./models/Question\";\r\nimport { isQuestionsState } from \"./actions/types\";\r\nimport GlobalStyle from \"./styles/globalStyles\";\r\nimport StyledContent from \"./AppStyle\";\r\n\r\nconst App: React.FC = () => {\r\n  const [questionsLoaded, setQuestionsLoaded] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const setQuestionsFromLocalStorage = () => {\r\n    const questions = JSON.parse(\r\n      localStorage.getItem(\"questions\") || \"[]\"\r\n    ) as Question[];\r\n    isQuestionsState(questions)\r\n      ? dispatch(setQuestionsAction(questions))\r\n      : console.error(\"Questions in local storage are wrong\");\r\n\r\n    setQuestionsLoaded(() => true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQuestionsFromLocalStorage();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <StyledContent>\r\n          <Switch>\r\n            <Route path=\"/questions\">\r\n              <Questions />\r\n            </Route>\r\n            {/* So it can use the questions in store */}\r\n            <Route path=\"/revision\">\r\n              {questionsLoaded && <Revision />}\r\n            </Route>{\" \"}\r\n          </Switch>\r\n        </StyledContent>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\reducers\\index.ts",["145"],"import {\r\n  QuestionsState,\r\n  ADD_QUESTION,\r\n  CURRENT_VERSION,\r\n  QuestionActionTypes,\r\n  EDIT_QUESTION,\r\n  SET_QUESTIONS,\r\n  DELETE_QUESTION,\r\n} from \"../actions/types\";\r\nimport { combineReducers, Action } from \"redux\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst defaultQuestionsState: QuestionsState = [];\r\n\r\nexport const questionsReducer = (\r\n  state = defaultQuestionsState,\r\n  action: QuestionActionTypes\r\n): QuestionsState => {\r\n  switch (action.type) {\r\n    case ADD_QUESTION:\r\n      return [...state, action.payload];\r\n    case DELETE_QUESTION:\r\n      return state.filter((question) => question.id !== action.payload);\r\n    case EDIT_QUESTION:\r\n      return state.map((question) =>\r\n        question.id === action.payload.id ? action.payload : question\r\n      );\r\n    case SET_QUESTIONS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  questions: questionsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\types.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\globalStyles.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\Revision.tsx",["146","147"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { shuffle } from \"../../utils/shuffle\";\r\nimport { editQuestionAction, setQuestionsAction } from \"../../actions\";\r\nimport RevisionTypeSelectionSubpage from \"./RevisionTypeSelectionSubpage\";\r\nimport FinalScoreSubpage from \"./FinalScoreSubpage\";\r\nimport QuestionSubpage from \"./QuestionSubpage\";\r\nimport AnswerSubpage from \"./AnswerSubpage\";\r\n\r\nexport enum RevisionType {\r\n  None,\r\n  NewSession,\r\n  ContinueLastSession,\r\n  IncorrectAndUnansweredQuestions,\r\n}\r\n\r\n/*\r\n- When you open the revision sub-page it asks if you want to continue or start a new session.\r\n- If you choose to start a new session, it takes all the unanswered questions and puts them in questionIndexes\r\n- Otherwise it acts normally.\r\n*/\r\n\r\nconst Revision: React.FC = () => {\r\n  const [revisionType, setRevisionType] = useState(RevisionType.None);\r\n  const [score, setScore] = useState(0);\r\n  const [maxScore, setMaxScore] = useState(0);\r\n  const [questionIds, setQuestionIds] = useState<string[]>([]);\r\n  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);\r\n  const [answered, setAnswered] = useState(false);\r\n  const currentId = useMemo(\r\n    () => (questionIds.length > 0 ? questionIds[0] : \"\"),\r\n    [questionIds]\r\n  );\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n  const currentQuestion = useMemo(\r\n    () => questions.find(({ id }) => currentId === id),\r\n    [currentId]\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const tryAgain = () => {\r\n    dispatch(\r\n      setQuestionsAction(\r\n        questions.map((question) => {\r\n          return { ...question, lastAnsweredCorrectly: undefined };\r\n        })\r\n      )\r\n    );\r\n    setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n    setScore(() => 0);\r\n    setMaxScore(() => 0);\r\n    setAnswered(() => false);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setAnswered(() => false);\r\n    setSelectedAnswers(() => []);\r\n    // Remove first question index.\r\n    setQuestionIds((prev) => [...prev.filter((_, idx) => idx !== 0)]);\r\n  };\r\n\r\n  const finishAnswering = () => {\r\n    setSelectedAnswers(() => []);\r\n    // Because current index is taken from question indexes.\r\n    setQuestionIds(() => []);\r\n  };\r\n\r\n  const countCorrectAnswers = () => {\r\n    let correctAnswers = 0;\r\n    selectedAnswers.forEach((answer) => {\r\n      if (\r\n        currentQuestion?.correctAnswers.some(\r\n          (correctAnswer) => correctAnswer === answer\r\n        )\r\n      ) {\r\n        correctAnswers++;\r\n      }\r\n    });\r\n\r\n    return correctAnswers;\r\n  };\r\n\r\n  const submitAnswer = () => {\r\n    const correctAnswers = countCorrectAnswers();\r\n    if (currentQuestion === undefined) {\r\n      return;\r\n    }\r\n    const questionCorrectlyAnsweredCount =\r\n      currentQuestion.correctlyAnsweredCount ?? 0;\r\n    const questionTotalAnsweredCount = currentQuestion.totalAnsweredCount ?? 0;\r\n\r\n    dispatch(\r\n      editQuestionAction({\r\n        ...currentQuestion,\r\n        lastAnsweredCorrectly:\r\n          correctAnswers === currentQuestion.correctAnswers.length\r\n            ? true\r\n            : false,\r\n        totalAnsweredCount: questionTotalAnsweredCount + 1,\r\n        correctlyAnsweredCount:\r\n          questionCorrectlyAnsweredCount +\r\n          (correctAnswers === currentQuestion.correctAnswers.length ? 1 : 0),\r\n      })\r\n    );\r\n    setScore((prev) => {\r\n      const newPrev = (prev +=\r\n        correctAnswers / currentQuestion.correctAnswers.length);\r\n      return isNaN(newPrev) ? 0 : newPrev;\r\n    });\r\n    setMaxScore((prev) => (prev += 1));\r\n    setAnswered(() => true);\r\n  };\r\n\r\n  const countScore = () => `${Math.round(score * 100) / 100}/${maxScore}`;\r\n\r\n  // give correct questions based on revisionType\r\n  useEffect(() => {\r\n    if (questionIds.length === 0) {\r\n      switch (revisionType) {\r\n        case RevisionType.NewSession:\r\n          dispatch(\r\n            setQuestionsAction(\r\n              questions.map((question) => {\r\n                return { ...question, lastAnsweredCorrectly: undefined };\r\n              })\r\n            )\r\n          );\r\n          setQuestionIds(() => shuffle(questions.map(({ id }) => id)));\r\n          break;\r\n        case RevisionType.ContinueLastSession:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(\r\n                  ({ lastAnsweredCorrectly }) =>\r\n                    lastAnsweredCorrectly === undefined\r\n                )\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        case RevisionType.IncorrectAndUnansweredQuestions:\r\n          setQuestionIds(() =>\r\n            shuffle(\r\n              questions\r\n                .filter(({ lastAnsweredCorrectly }) => !lastAnsweredCorrectly)\r\n                .map(({ id }) => id)\r\n            )\r\n          );\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  }, [revisionType]);\r\n\r\n  const render = () => {\r\n    if (revisionType === RevisionType.None) {\r\n      return <RevisionTypeSelectionSubpage setRevisionType={setRevisionType} />;\r\n    } else if (currentId === \"\") {\r\n      return (\r\n        <FinalScoreSubpage\r\n          tryAgain={tryAgain}\r\n          questions={questions}\r\n          score={countScore()}\r\n        />\r\n      );\r\n    } else if (!answered) {\r\n      return (\r\n        currentQuestion && (\r\n          <QuestionSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            submitAnswer={submitAnswer}\r\n            setSelectedAnswers={setSelectedAnswers}\r\n          />\r\n        )\r\n      );\r\n    } else {\r\n      return (\r\n        currentQuestion && (\r\n          <AnswerSubpage\r\n            question={currentQuestion}\r\n            selectedAnswers={selectedAnswers}\r\n            score={countScore()}\r\n            buttons={\r\n              <>\r\n                {questionIds.length > 1 && (\r\n                  <button onClick={nextQuestion}>Next Question</button>\r\n                )}\r\n                <button onClick={finishAnswering}>Finish</button>\r\n              </>\r\n            }\r\n          />\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return <>{render()}</>;\r\n};\r\n\r\nexport default Revision;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\Navbar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Questions.tsx",["148","149","150"],"import React from \"react\";\r\nimport { useRouteMatch, Switch, Route } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Editor from \"./Editor\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\nimport { QuestionsState, isQuestionsState } from \"../../actions/types\";\r\nimport { setQuestionsAction } from \"../../actions\";\r\nimport Button from \"../common/Button/Button\";\r\nimport StyledDiv from \"./QuestionsStyle\";\r\nimport Dropzone from \"../common/Dropzone/Dropzone\";\r\n\r\n\r\nconst Questions: React.FC = () => {\r\n  const match = useRouteMatch();\r\n  const questions = useTypedSelector(({ questions }) => questions);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${match.path}/editor`}>\r\n        <Editor />\r\n      </Route>\r\n      <Route path={match.path}>\r\n        <StyledDiv>\r\n          <Link to={`${match.url}/editor`}>\r\n            <Button\r\n              backgroundIcon=\"create\"\r\n              width=\"23rem\"\r\n              height=\"12.4rem\"\r\n              fontSize=\"1.9rem\"\r\n              backgroundIconSize=\"10rem\"\r\n            >\r\n              Edit Questions\r\n            </Button>\r\n          </Link>\r\n          <Dropzone />\r\n          <a\r\n            href={`data:text/plain;charset=utf-8,${encodeURIComponent(\r\n              JSON.stringify(questions)\r\n            )}`}\r\n            download=\"questions.json\"\r\n          >\r\n            <Button\r\n              backgroundIcon=\"get_app\"\r\n              width=\"17.5rem\"\r\n              height=\"9.6rem\"\r\n              backgroundIconSize=\"7rem\"\r\n            >\r\n              Download Questions\r\n            </Button>\r\n          </a>\r\n        </StyledDiv>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\actions\\index.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\values.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\reset.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\styles\\setSizing.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\models\\Question.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\isArrayOfType.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Navbar\\NavbarStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\utils\\shuffle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\FinalScoreSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\AnswerSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\Editor.tsx",["151"],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\RevisionTypeSelectionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Revision\\QuestionSubpage.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\Button.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditQuestion.tsx",["152"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Redirect, useParams } from \"react-router\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport {\r\n  addQuestionAction,\r\n  editQuestionAction,\r\n  deleteQuestionAction,\r\n} from \"../../actions\";\r\nimport { useTypedSelector } from \"../../reducers\";\r\n\r\nconst EditQuestion: React.FC = () => {\r\n  const { questionId }: { questionId: string | undefined } = useParams();\r\n  const [questionText, setQuestionText] = useState(\"\");\r\n  const [answers, setAnswers] = useState<string[]>([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState<number[]>([]);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const questionFromStore = useTypedSelector(({ questions }) =>\r\n    questions.find(({ id }) => id === questionId)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const updateQuestion = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    setQuestionText(() => value);\r\n  };\r\n\r\n  const updateAnswer = (answerText: string, answerIdx: number) => {\r\n    setAnswers((prev) => {\r\n      return prev.map((answer, idx) =>\r\n        idx === answerIdx ? answerText : answer\r\n      );\r\n    });\r\n  };\r\n\r\n  const switchAnswer = (idx: number) => {\r\n    correctAnswers.includes(idx)\r\n      ? setCorrectAnswers((prev) => prev.filter((answer) => answer !== idx))\r\n      : setCorrectAnswers((prev) => [...prev, idx].sort((a, b) => a - b));\r\n  };\r\n\r\n  const addNewAnswer = (answerText = \"\") =>\r\n    setAnswers((prev) => [...prev, answerText]);\r\n\r\n  const removeLastAnswer = () => {\r\n    setCorrectAnswers((prev) =>\r\n      prev.filter((correctAnswerId) => correctAnswerId !== answers.length - 1)\r\n    );\r\n    setAnswers((prev) => prev.filter((_, idx) => idx !== prev.length - 1));\r\n  };\r\n\r\n  const resolveSecret = () => {\r\n    const nextLetter = (letter: string) => {\r\n      return String.fromCharCode(letter.charCodeAt(0) + 1);\r\n    };\r\n\r\n    if (questionText.indexOf(\"Answer:\") < 0) {\r\n      return;\r\n    }\r\n\r\n    let currentQuestionBeginning = \"A.\";\r\n\r\n    const newQuestionText = questionText.slice(\r\n      0,\r\n      questionText.indexOf(currentQuestionBeginning)\r\n    );\r\n\r\n    let questionReminder = questionText;\r\n\r\n    const newAnswers: string[] = [];\r\n    do {\r\n      questionReminder = questionReminder.slice(\r\n        questionReminder.indexOf(currentQuestionBeginning)\r\n      );\r\n      currentQuestionBeginning = `${nextLetter(currentQuestionBeginning)}.`;\r\n      const nextEndIndex = questionReminder.indexOf(currentQuestionBeginning);\r\n      newAnswers.push(\r\n        questionReminder.slice(\r\n          0,\r\n          nextEndIndex > -1 ? nextEndIndex : questionReminder.indexOf(\"Answer:\")\r\n        )\r\n      );\r\n    } while (questionReminder.indexOf(currentQuestionBeginning) > -1);\r\n\r\n    const newCorrectAnswer =\r\n      questionReminder[questionReminder.indexOf(\"Answer: \") + 8].charCodeAt(0) -\r\n      65;\r\n\r\n    setQuestionText(() => newQuestionText);\r\n    setAnswers(() => newAnswers);\r\n    setCorrectAnswers(() => [newCorrectAnswer]);\r\n  };\r\n\r\n  const isQuestionValid = () => {\r\n    if (questionText.trim().localeCompare(\"\") === 0) {\r\n      console.warn(\"Question text is required\");\r\n      return false;\r\n    }\r\n    if (answers.length === 0) {\r\n      console.warn(\"Answers are required\");\r\n      return false;\r\n    }\r\n    for (const answer of answers) {\r\n      if (answer.trim().localeCompare(\"\") === 0) {\r\n        console.warn(\"All answer texts are required\");\r\n        return false;\r\n      }\r\n    }\r\n    if (correctAnswers.length === 0) {\r\n      console.warn(\"At least one answer has to be correct\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const addQuestionAndRedirect = () => {\r\n    resolveSecret();\r\n    if (!isQuestionValid()) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addQuestionAction({\r\n        id: uuidv4(),\r\n        question: questionText.trim(),\r\n        answers: Object.entries(answers).map(([_, answer]) => answer.trim()),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const editQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(\r\n      editQuestionAction({\r\n        id: questionId,\r\n        question: questionText,\r\n        answers: Object.entries(answers).map(([_, answer]) => answer),\r\n        correctAnswers,\r\n      })\r\n    );\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const deleteQuestionAndRedirect = () => {\r\n    if (!questionId) {\r\n      return;\r\n    }\r\n    dispatch(deleteQuestionAction(questionId));\r\n    setRedirect(() => true);\r\n  };\r\n\r\n  const setQuestionData = () => {\r\n    const q = questionFromStore;\r\n    if (!q) return;\r\n    setQuestionText(() => q.question);\r\n    q.answers.forEach((answer, idx) => {\r\n      addNewAnswer(answer);\r\n      if (q.correctAnswers.indexOf(idx) > -1) {\r\n        switchAnswer(idx);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    questionId && setQuestionData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Question:</p>\r\n      <textarea value={questionText} onChange={updateQuestion}></textarea>\r\n      <p>Answers:</p>\r\n      <div className=\"answers\">\r\n        {answers.map((answer, idx) => (\r\n          <div key={idx}>\r\n            <textarea\r\n              value={answer}\r\n              onChange={(e) => updateAnswer(e.target.value, idx)}\r\n            ></textarea>\r\n            <input\r\n              type=\"checkbox\"\r\n              defaultChecked={correctAnswers.includes(idx)}\r\n              onChange={() => switchAnswer(idx)}\r\n            ></input>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={() => addNewAnswer()}>+</button>\r\n      <button onClick={removeLastAnswer}>-</button>\r\n      {questionId ? (\r\n        <>\r\n          <button onClick={editQuestionAndRedirect}>Save Question</button>\r\n          <button onClick={deleteQuestionAndRedirect}>Delete Question</button>\r\n        </>\r\n      ) : (\r\n        <button onClick={addQuestionAndRedirect}>Add Question</button>\r\n      )}\r\n      {redirect && <Redirect to=\"/questions/editor\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditQuestion;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Button\\ButtonStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\AppStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\QuestionsStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\Dropzone.tsx",["153"],"import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { isQuestionsState, QuestionsState } from \"../../../actions/types\";\r\nimport { setQuestionsAction } from \"../../../actions\";\r\nimport StyledDropzone from \"./DropzoneStyle\";\r\n\r\nconst Dropzone: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const questionsStateFromString = (contents: string) => {\r\n    try {\r\n      const parsedFileContents = JSON.parse(contents);\r\n      if (!isQuestionsState(parsedFileContents)) {\r\n        console.log(\"File isn't in correct questions format\");\r\n        return;\r\n      }\r\n      return parsedFileContents as QuestionsState;\r\n    } catch (e) {\r\n      console.log(\"Couldn't parse file contents as JSON\");\r\n    }\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onabort = () => console.log(\"file reading was aborted\");\r\n    reader.onerror = (e) => console.log(e);\r\n    reader.onload = (e) => {\r\n      if (typeof e.target?.result !== \"string\") {\r\n        console.log(\"Couldn't get string from file\");\r\n        return;\r\n      }\r\n      const questionsState = questionsStateFromString(e.target.result);\r\n      questionsState && dispatch(setQuestionsAction(questionsState));\r\n    };\r\n    reader.readAsText(file);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <StyledDropzone {...getRootProps()}>\r\n      <input {...getInputProps()} accept=\".json\" />\r\n      <div className=\"buttonIcon\">\r\n        <i className=\"material-icons\">publish</i>\r\n      </div>\r\n      {isDragActive ? (\r\n        <span>Drop the questions file here...</span>\r\n      ) : (\r\n        <span>Drag and drop here or click to upload the questions file</span>\r\n      )}\r\n    </StyledDropzone>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\Dropzone\\DropzoneStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElement.tsx",["154"],"import React from \"react\";\r\nimport StyledQuestion from \"./QuestionListElementStyle\";\r\n\r\ntype Props = {};\r\n\r\nconst QuestionListElement: React.FC = ({ children }) => {\r\n  return (\r\n    <StyledQuestion>\r\n      <span>{children}</span>\r\n    </StyledQuestion>\r\n  );\r\n};\r\n\r\nexport default QuestionListElement;\r\n","C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\QuestionListElement\\QuestionListElementStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\Questions\\EditorStyle.ts",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBar.tsx",[],"C:\\Dev\\Projects\\Web\\examiner\\src\\components\\common\\SearchBar\\SearchBarStyle.ts",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":31,"column":6,"nodeType":"161","endLine":31,"endColumn":8,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":4,"column":3,"nodeType":"165","messageId":"166","endLine":4,"endColumn":18},{"ruleId":"159","severity":1,"message":"167","line":39,"column":5,"nodeType":"161","endLine":39,"endColumn":16,"suggestions":"168"},{"ruleId":"159","severity":1,"message":"169","line":157,"column":6,"nodeType":"161","endLine":157,"endColumn":20,"suggestions":"170"},{"ruleId":"163","severity":1,"message":"171","line":7,"column":10,"nodeType":"165","messageId":"166","endLine":7,"endColumn":24},{"ruleId":"163","severity":1,"message":"172","line":7,"column":26,"nodeType":"165","messageId":"166","endLine":7,"endColumn":42},{"ruleId":"163","severity":1,"message":"173","line":8,"column":10,"nodeType":"165","messageId":"166","endLine":8,"endColumn":28},{"ruleId":"163","severity":1,"message":"174","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"159","severity":1,"message":"175","line":171,"column":6,"nodeType":"161","endLine":171,"endColumn":8,"suggestions":"176"},{"ruleId":"159","severity":1,"message":"177","line":40,"column":6,"nodeType":"161","endLine":40,"endColumn":8,"suggestions":"178"},{"ruleId":"163","severity":1,"message":"179","line":4,"column":6,"nodeType":"165","messageId":"166","endLine":4,"endColumn":11},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setQuestionsFromLocalStorage'. Either include it or remove the dependency array.","ArrayExpression",["182"],"@typescript-eslint/no-unused-vars","'CURRENT_VERSION' is defined but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'questions'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'dispatch', 'questionIds.length', and 'questions'. Either include them or remove the dependency array.",["184"],"'QuestionsState' is defined but never used.","'isQuestionsState' is defined but never used.","'setQuestionsAction' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'questionId' and 'setQuestionData'. Either include them or remove the dependency array.",["185"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["186"],"'Props' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [setQuestionsFromLocalStorage]",{"range":"197","text":"198"},"Update the dependencies array to be: [currentId, questions]",{"range":"199","text":"200"},"Update the dependencies array to be: [dispatch, questionIds.length, questions, revisionType]",{"range":"201","text":"202"},"Update the dependencies array to be: [questionId, setQuestionData]",{"range":"203","text":"204"},"Update the dependencies array to be: [dispatch]",{"range":"205","text":"206"},[1097,1099],"[setQuestionsFromLocalStorage]",[1542,1553],"[currentId, questions]",[5004,5018],"[dispatch, questionIds.length, questions, revisionType]",[4960,4962],"[questionId, setQuestionData]",[1405,1407],"[dispatch]"]